<?php
/**
 * PokemonSpeciesDetail
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PokéAPI
 *
 * All the Pokémon data you'll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We've covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.
 *
 * The version of the OpenAPI document: 2.7.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * PokemonSpeciesDetail Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PokemonSpeciesDetail implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PokemonSpeciesDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'order' => 'int',
        'gender_rate' => 'int',
        'capture_rate' => 'int',
        'base_happiness' => 'int',
        'is_baby' => 'bool',
        'is_legendary' => 'bool',
        'is_mythical' => 'bool',
        'hatch_counter' => 'int',
        'has_gender_differences' => 'bool',
        'forms_switchable' => 'bool',
        'growth_rate' => '\OpenAPI\Client\Model\GrowthRateSummary',
        'pokedex_numbers' => '\OpenAPI\Client\Model\PokemonDexEntry[]',
        'egg_groups' => '\OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]',
        'color' => '\OpenAPI\Client\Model\PokemonColorSummary',
        'shape' => '\OpenAPI\Client\Model\PokemonShapeSummary',
        'evolves_from_species' => '\OpenAPI\Client\Model\PokemonSpeciesSummary',
        'evolution_chain' => '\OpenAPI\Client\Model\EvolutionChainSummary',
        'habitat' => '\OpenAPI\Client\Model\PokemonHabitatSummary',
        'generation' => '\OpenAPI\Client\Model\GenerationSummary',
        'names' => '\OpenAPI\Client\Model\PokemonFormDetailFormNamesInner[]',
        'pal_park_encounters' => '\OpenAPI\Client\Model\PokemonSpeciesDetailPalParkEncountersInner[]',
        'form_descriptions' => '\OpenAPI\Client\Model\PokemonSpeciesDescription[]',
        'flavor_text_entries' => '\OpenAPI\Client\Model\PokemonSpeciesFlavorText[]',
        'genera' => '\OpenAPI\Client\Model\PokemonSpeciesDetailGeneraInner[]',
        'varieties' => '\OpenAPI\Client\Model\PokemonSpeciesDetailVarietiesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'order' => null,
        'gender_rate' => null,
        'capture_rate' => null,
        'base_happiness' => null,
        'is_baby' => null,
        'is_legendary' => null,
        'is_mythical' => null,
        'hatch_counter' => null,
        'has_gender_differences' => null,
        'forms_switchable' => null,
        'growth_rate' => null,
        'pokedex_numbers' => null,
        'egg_groups' => null,
        'color' => null,
        'shape' => null,
        'evolves_from_species' => null,
        'evolution_chain' => null,
        'habitat' => null,
        'generation' => null,
        'names' => null,
        'pal_park_encounters' => null,
        'form_descriptions' => null,
        'flavor_text_entries' => null,
        'genera' => null,
        'varieties' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'order' => true,
        'gender_rate' => true,
        'capture_rate' => true,
        'base_happiness' => true,
        'is_baby' => false,
        'is_legendary' => false,
        'is_mythical' => false,
        'hatch_counter' => true,
        'has_gender_differences' => false,
        'forms_switchable' => false,
        'growth_rate' => false,
        'pokedex_numbers' => false,
        'egg_groups' => false,
        'color' => false,
        'shape' => false,
        'evolves_from_species' => false,
        'evolution_chain' => false,
        'habitat' => false,
        'generation' => false,
        'names' => false,
        'pal_park_encounters' => false,
        'form_descriptions' => false,
        'flavor_text_entries' => false,
        'genera' => false,
        'varieties' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'order' => 'order',
        'gender_rate' => 'gender_rate',
        'capture_rate' => 'capture_rate',
        'base_happiness' => 'base_happiness',
        'is_baby' => 'is_baby',
        'is_legendary' => 'is_legendary',
        'is_mythical' => 'is_mythical',
        'hatch_counter' => 'hatch_counter',
        'has_gender_differences' => 'has_gender_differences',
        'forms_switchable' => 'forms_switchable',
        'growth_rate' => 'growth_rate',
        'pokedex_numbers' => 'pokedex_numbers',
        'egg_groups' => 'egg_groups',
        'color' => 'color',
        'shape' => 'shape',
        'evolves_from_species' => 'evolves_from_species',
        'evolution_chain' => 'evolution_chain',
        'habitat' => 'habitat',
        'generation' => 'generation',
        'names' => 'names',
        'pal_park_encounters' => 'pal_park_encounters',
        'form_descriptions' => 'form_descriptions',
        'flavor_text_entries' => 'flavor_text_entries',
        'genera' => 'genera',
        'varieties' => 'varieties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'order' => 'setOrder',
        'gender_rate' => 'setGenderRate',
        'capture_rate' => 'setCaptureRate',
        'base_happiness' => 'setBaseHappiness',
        'is_baby' => 'setIsBaby',
        'is_legendary' => 'setIsLegendary',
        'is_mythical' => 'setIsMythical',
        'hatch_counter' => 'setHatchCounter',
        'has_gender_differences' => 'setHasGenderDifferences',
        'forms_switchable' => 'setFormsSwitchable',
        'growth_rate' => 'setGrowthRate',
        'pokedex_numbers' => 'setPokedexNumbers',
        'egg_groups' => 'setEggGroups',
        'color' => 'setColor',
        'shape' => 'setShape',
        'evolves_from_species' => 'setEvolvesFromSpecies',
        'evolution_chain' => 'setEvolutionChain',
        'habitat' => 'setHabitat',
        'generation' => 'setGeneration',
        'names' => 'setNames',
        'pal_park_encounters' => 'setPalParkEncounters',
        'form_descriptions' => 'setFormDescriptions',
        'flavor_text_entries' => 'setFlavorTextEntries',
        'genera' => 'setGenera',
        'varieties' => 'setVarieties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'order' => 'getOrder',
        'gender_rate' => 'getGenderRate',
        'capture_rate' => 'getCaptureRate',
        'base_happiness' => 'getBaseHappiness',
        'is_baby' => 'getIsBaby',
        'is_legendary' => 'getIsLegendary',
        'is_mythical' => 'getIsMythical',
        'hatch_counter' => 'getHatchCounter',
        'has_gender_differences' => 'getHasGenderDifferences',
        'forms_switchable' => 'getFormsSwitchable',
        'growth_rate' => 'getGrowthRate',
        'pokedex_numbers' => 'getPokedexNumbers',
        'egg_groups' => 'getEggGroups',
        'color' => 'getColor',
        'shape' => 'getShape',
        'evolves_from_species' => 'getEvolvesFromSpecies',
        'evolution_chain' => 'getEvolutionChain',
        'habitat' => 'getHabitat',
        'generation' => 'getGeneration',
        'names' => 'getNames',
        'pal_park_encounters' => 'getPalParkEncounters',
        'form_descriptions' => 'getFormDescriptions',
        'flavor_text_entries' => 'getFlavorTextEntries',
        'genera' => 'getGenera',
        'varieties' => 'getVarieties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('gender_rate', $data ?? [], null);
        $this->setIfExists('capture_rate', $data ?? [], null);
        $this->setIfExists('base_happiness', $data ?? [], null);
        $this->setIfExists('is_baby', $data ?? [], null);
        $this->setIfExists('is_legendary', $data ?? [], null);
        $this->setIfExists('is_mythical', $data ?? [], null);
        $this->setIfExists('hatch_counter', $data ?? [], null);
        $this->setIfExists('has_gender_differences', $data ?? [], null);
        $this->setIfExists('forms_switchable', $data ?? [], null);
        $this->setIfExists('growth_rate', $data ?? [], null);
        $this->setIfExists('pokedex_numbers', $data ?? [], null);
        $this->setIfExists('egg_groups', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('shape', $data ?? [], null);
        $this->setIfExists('evolves_from_species', $data ?? [], null);
        $this->setIfExists('evolution_chain', $data ?? [], null);
        $this->setIfExists('habitat', $data ?? [], null);
        $this->setIfExists('generation', $data ?? [], null);
        $this->setIfExists('names', $data ?? [], null);
        $this->setIfExists('pal_park_encounters', $data ?? [], null);
        $this->setIfExists('form_descriptions', $data ?? [], null);
        $this->setIfExists('flavor_text_entries', $data ?? [], null);
        $this->setIfExists('genera', $data ?? [], null);
        $this->setIfExists('varieties', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['growth_rate'] === null) {
            $invalidProperties[] = "'growth_rate' can't be null";
        }
        if ($this->container['pokedex_numbers'] === null) {
            $invalidProperties[] = "'pokedex_numbers' can't be null";
        }
        if ($this->container['egg_groups'] === null) {
            $invalidProperties[] = "'egg_groups' can't be null";
        }
        if ($this->container['color'] === null) {
            $invalidProperties[] = "'color' can't be null";
        }
        if ($this->container['shape'] === null) {
            $invalidProperties[] = "'shape' can't be null";
        }
        if ($this->container['evolves_from_species'] === null) {
            $invalidProperties[] = "'evolves_from_species' can't be null";
        }
        if ($this->container['evolution_chain'] === null) {
            $invalidProperties[] = "'evolution_chain' can't be null";
        }
        if ($this->container['habitat'] === null) {
            $invalidProperties[] = "'habitat' can't be null";
        }
        if ($this->container['generation'] === null) {
            $invalidProperties[] = "'generation' can't be null";
        }
        if ($this->container['names'] === null) {
            $invalidProperties[] = "'names' can't be null";
        }
        if ($this->container['pal_park_encounters'] === null) {
            $invalidProperties[] = "'pal_park_encounters' can't be null";
        }
        if ($this->container['form_descriptions'] === null) {
            $invalidProperties[] = "'form_descriptions' can't be null";
        }
        if ($this->container['flavor_text_entries'] === null) {
            $invalidProperties[] = "'flavor_text_entries' can't be null";
        }
        if ($this->container['genera'] === null) {
            $invalidProperties[] = "'genera' can't be null";
        }
        if ($this->container['varieties'] === null) {
            $invalidProperties[] = "'varieties' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId(int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new InvalidArgumentException('invalid length for $name when calling PokemonSpeciesDetail., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder(): ?int
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order order
     *
     * @return $this
     */
    public function setOrder(?int $order): static
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets gender_rate
     *
     * @return int|null
     */
    public function getGenderRate(): ?int
    {
        return $this->container['gender_rate'];
    }

    /**
     * Sets gender_rate
     *
     * @param int|null $gender_rate gender_rate
     *
     * @return $this
     */
    public function setGenderRate(?int $gender_rate): static
    {
        if (is_null($gender_rate)) {
            array_push($this->openAPINullablesSetToNull, 'gender_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender_rate'] = $gender_rate;

        return $this;
    }

    /**
     * Gets capture_rate
     *
     * @return int|null
     */
    public function getCaptureRate(): ?int
    {
        return $this->container['capture_rate'];
    }

    /**
     * Sets capture_rate
     *
     * @param int|null $capture_rate capture_rate
     *
     * @return $this
     */
    public function setCaptureRate(?int $capture_rate): static
    {
        if (is_null($capture_rate)) {
            array_push($this->openAPINullablesSetToNull, 'capture_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('capture_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['capture_rate'] = $capture_rate;

        return $this;
    }

    /**
     * Gets base_happiness
     *
     * @return int|null
     */
    public function getBaseHappiness(): ?int
    {
        return $this->container['base_happiness'];
    }

    /**
     * Sets base_happiness
     *
     * @param int|null $base_happiness base_happiness
     *
     * @return $this
     */
    public function setBaseHappiness(?int $base_happiness): static
    {
        if (is_null($base_happiness)) {
            array_push($this->openAPINullablesSetToNull, 'base_happiness');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('base_happiness', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['base_happiness'] = $base_happiness;

        return $this;
    }

    /**
     * Gets is_baby
     *
     * @return bool|null
     */
    public function getIsBaby(): ?bool
    {
        return $this->container['is_baby'];
    }

    /**
     * Sets is_baby
     *
     * @param bool|null $is_baby is_baby
     *
     * @return $this
     */
    public function setIsBaby(?bool $is_baby): static
    {
        if (is_null($is_baby)) {
            throw new InvalidArgumentException('non-nullable is_baby cannot be null');
        }
        $this->container['is_baby'] = $is_baby;

        return $this;
    }

    /**
     * Gets is_legendary
     *
     * @return bool|null
     */
    public function getIsLegendary(): ?bool
    {
        return $this->container['is_legendary'];
    }

    /**
     * Sets is_legendary
     *
     * @param bool|null $is_legendary is_legendary
     *
     * @return $this
     */
    public function setIsLegendary(?bool $is_legendary): static
    {
        if (is_null($is_legendary)) {
            throw new InvalidArgumentException('non-nullable is_legendary cannot be null');
        }
        $this->container['is_legendary'] = $is_legendary;

        return $this;
    }

    /**
     * Gets is_mythical
     *
     * @return bool|null
     */
    public function getIsMythical(): ?bool
    {
        return $this->container['is_mythical'];
    }

    /**
     * Sets is_mythical
     *
     * @param bool|null $is_mythical is_mythical
     *
     * @return $this
     */
    public function setIsMythical(?bool $is_mythical): static
    {
        if (is_null($is_mythical)) {
            throw new InvalidArgumentException('non-nullable is_mythical cannot be null');
        }
        $this->container['is_mythical'] = $is_mythical;

        return $this;
    }

    /**
     * Gets hatch_counter
     *
     * @return int|null
     */
    public function getHatchCounter(): ?int
    {
        return $this->container['hatch_counter'];
    }

    /**
     * Sets hatch_counter
     *
     * @param int|null $hatch_counter hatch_counter
     *
     * @return $this
     */
    public function setHatchCounter(?int $hatch_counter): static
    {
        if (is_null($hatch_counter)) {
            array_push($this->openAPINullablesSetToNull, 'hatch_counter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hatch_counter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hatch_counter'] = $hatch_counter;

        return $this;
    }

    /**
     * Gets has_gender_differences
     *
     * @return bool|null
     */
    public function getHasGenderDifferences(): ?bool
    {
        return $this->container['has_gender_differences'];
    }

    /**
     * Sets has_gender_differences
     *
     * @param bool|null $has_gender_differences has_gender_differences
     *
     * @return $this
     */
    public function setHasGenderDifferences(?bool $has_gender_differences): static
    {
        if (is_null($has_gender_differences)) {
            throw new InvalidArgumentException('non-nullable has_gender_differences cannot be null');
        }
        $this->container['has_gender_differences'] = $has_gender_differences;

        return $this;
    }

    /**
     * Gets forms_switchable
     *
     * @return bool|null
     */
    public function getFormsSwitchable(): ?bool
    {
        return $this->container['forms_switchable'];
    }

    /**
     * Sets forms_switchable
     *
     * @param bool|null $forms_switchable forms_switchable
     *
     * @return $this
     */
    public function setFormsSwitchable(?bool $forms_switchable): static
    {
        if (is_null($forms_switchable)) {
            throw new InvalidArgumentException('non-nullable forms_switchable cannot be null');
        }
        $this->container['forms_switchable'] = $forms_switchable;

        return $this;
    }

    /**
     * Gets growth_rate
     *
     * @return \OpenAPI\Client\Model\GrowthRateSummary
     */
    public function getGrowthRate(): \OpenAPI\Client\Model\GrowthRateSummary
    {
        return $this->container['growth_rate'];
    }

    /**
     * Sets growth_rate
     *
     * @param \OpenAPI\Client\Model\GrowthRateSummary $growth_rate growth_rate
     *
     * @return $this
     */
    public function setGrowthRate(\OpenAPI\Client\Model\GrowthRateSummary $growth_rate): static
    {
        if (is_null($growth_rate)) {
            throw new InvalidArgumentException('non-nullable growth_rate cannot be null');
        }
        $this->container['growth_rate'] = $growth_rate;

        return $this;
    }

    /**
     * Gets pokedex_numbers
     *
     * @return \OpenAPI\Client\Model\PokemonDexEntry[]
     */
    public function getPokedexNumbers(): array
    {
        return $this->container['pokedex_numbers'];
    }

    /**
     * Sets pokedex_numbers
     *
     * @param \OpenAPI\Client\Model\PokemonDexEntry[] $pokedex_numbers pokedex_numbers
     *
     * @return $this
     */
    public function setPokedexNumbers(array $pokedex_numbers): static
    {
        if (is_null($pokedex_numbers)) {
            throw new InvalidArgumentException('non-nullable pokedex_numbers cannot be null');
        }
        $this->container['pokedex_numbers'] = $pokedex_numbers;

        return $this;
    }

    /**
     * Gets egg_groups
     *
     * @return \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]
     */
    public function getEggGroups(): array
    {
        return $this->container['egg_groups'];
    }

    /**
     * Sets egg_groups
     *
     * @param \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[] $egg_groups egg_groups
     *
     * @return $this
     */
    public function setEggGroups(array $egg_groups): static
    {
        if (is_null($egg_groups)) {
            throw new InvalidArgumentException('non-nullable egg_groups cannot be null');
        }
        $this->container['egg_groups'] = $egg_groups;

        return $this;
    }

    /**
     * Gets color
     *
     * @return \OpenAPI\Client\Model\PokemonColorSummary
     */
    public function getColor(): \OpenAPI\Client\Model\PokemonColorSummary
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param \OpenAPI\Client\Model\PokemonColorSummary $color color
     *
     * @return $this
     */
    public function setColor(\OpenAPI\Client\Model\PokemonColorSummary $color): static
    {
        if (is_null($color)) {
            throw new InvalidArgumentException('non-nullable color cannot be null');
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets shape
     *
     * @return \OpenAPI\Client\Model\PokemonShapeSummary
     */
    public function getShape(): \OpenAPI\Client\Model\PokemonShapeSummary
    {
        return $this->container['shape'];
    }

    /**
     * Sets shape
     *
     * @param \OpenAPI\Client\Model\PokemonShapeSummary $shape shape
     *
     * @return $this
     */
    public function setShape(\OpenAPI\Client\Model\PokemonShapeSummary $shape): static
    {
        if (is_null($shape)) {
            throw new InvalidArgumentException('non-nullable shape cannot be null');
        }
        $this->container['shape'] = $shape;

        return $this;
    }

    /**
     * Gets evolves_from_species
     *
     * @return \OpenAPI\Client\Model\PokemonSpeciesSummary
     */
    public function getEvolvesFromSpecies(): \OpenAPI\Client\Model\PokemonSpeciesSummary
    {
        return $this->container['evolves_from_species'];
    }

    /**
     * Sets evolves_from_species
     *
     * @param \OpenAPI\Client\Model\PokemonSpeciesSummary $evolves_from_species evolves_from_species
     *
     * @return $this
     */
    public function setEvolvesFromSpecies(\OpenAPI\Client\Model\PokemonSpeciesSummary $evolves_from_species): static
    {
        if (is_null($evolves_from_species)) {
            throw new InvalidArgumentException('non-nullable evolves_from_species cannot be null');
        }
        $this->container['evolves_from_species'] = $evolves_from_species;

        return $this;
    }

    /**
     * Gets evolution_chain
     *
     * @return \OpenAPI\Client\Model\EvolutionChainSummary
     */
    public function getEvolutionChain(): \OpenAPI\Client\Model\EvolutionChainSummary
    {
        return $this->container['evolution_chain'];
    }

    /**
     * Sets evolution_chain
     *
     * @param \OpenAPI\Client\Model\EvolutionChainSummary $evolution_chain evolution_chain
     *
     * @return $this
     */
    public function setEvolutionChain(\OpenAPI\Client\Model\EvolutionChainSummary $evolution_chain): static
    {
        if (is_null($evolution_chain)) {
            throw new InvalidArgumentException('non-nullable evolution_chain cannot be null');
        }
        $this->container['evolution_chain'] = $evolution_chain;

        return $this;
    }

    /**
     * Gets habitat
     *
     * @return \OpenAPI\Client\Model\PokemonHabitatSummary
     */
    public function getHabitat(): \OpenAPI\Client\Model\PokemonHabitatSummary
    {
        return $this->container['habitat'];
    }

    /**
     * Sets habitat
     *
     * @param \OpenAPI\Client\Model\PokemonHabitatSummary $habitat habitat
     *
     * @return $this
     */
    public function setHabitat(\OpenAPI\Client\Model\PokemonHabitatSummary $habitat): static
    {
        if (is_null($habitat)) {
            throw new InvalidArgumentException('non-nullable habitat cannot be null');
        }
        $this->container['habitat'] = $habitat;

        return $this;
    }

    /**
     * Gets generation
     *
     * @return \OpenAPI\Client\Model\GenerationSummary
     */
    public function getGeneration(): \OpenAPI\Client\Model\GenerationSummary
    {
        return $this->container['generation'];
    }

    /**
     * Sets generation
     *
     * @param \OpenAPI\Client\Model\GenerationSummary $generation generation
     *
     * @return $this
     */
    public function setGeneration(\OpenAPI\Client\Model\GenerationSummary $generation): static
    {
        if (is_null($generation)) {
            throw new InvalidArgumentException('non-nullable generation cannot be null');
        }
        $this->container['generation'] = $generation;

        return $this;
    }

    /**
     * Gets names
     *
     * @return \OpenAPI\Client\Model\PokemonFormDetailFormNamesInner[]
     */
    public function getNames(): array
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param \OpenAPI\Client\Model\PokemonFormDetailFormNamesInner[] $names names
     *
     * @return $this
     */
    public function setNames(array $names): static
    {
        if (is_null($names)) {
            throw new InvalidArgumentException('non-nullable names cannot be null');
        }
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets pal_park_encounters
     *
     * @return \OpenAPI\Client\Model\PokemonSpeciesDetailPalParkEncountersInner[]
     */
    public function getPalParkEncounters(): array
    {
        return $this->container['pal_park_encounters'];
    }

    /**
     * Sets pal_park_encounters
     *
     * @param \OpenAPI\Client\Model\PokemonSpeciesDetailPalParkEncountersInner[] $pal_park_encounters pal_park_encounters
     *
     * @return $this
     */
    public function setPalParkEncounters(array $pal_park_encounters): static
    {
        if (is_null($pal_park_encounters)) {
            throw new InvalidArgumentException('non-nullable pal_park_encounters cannot be null');
        }
        $this->container['pal_park_encounters'] = $pal_park_encounters;

        return $this;
    }

    /**
     * Gets form_descriptions
     *
     * @return \OpenAPI\Client\Model\PokemonSpeciesDescription[]
     */
    public function getFormDescriptions(): array
    {
        return $this->container['form_descriptions'];
    }

    /**
     * Sets form_descriptions
     *
     * @param \OpenAPI\Client\Model\PokemonSpeciesDescription[] $form_descriptions form_descriptions
     *
     * @return $this
     */
    public function setFormDescriptions(array $form_descriptions): static
    {
        if (is_null($form_descriptions)) {
            throw new InvalidArgumentException('non-nullable form_descriptions cannot be null');
        }
        $this->container['form_descriptions'] = $form_descriptions;

        return $this;
    }

    /**
     * Gets flavor_text_entries
     *
     * @return \OpenAPI\Client\Model\PokemonSpeciesFlavorText[]
     */
    public function getFlavorTextEntries(): array
    {
        return $this->container['flavor_text_entries'];
    }

    /**
     * Sets flavor_text_entries
     *
     * @param \OpenAPI\Client\Model\PokemonSpeciesFlavorText[] $flavor_text_entries flavor_text_entries
     *
     * @return $this
     */
    public function setFlavorTextEntries(array $flavor_text_entries): static
    {
        if (is_null($flavor_text_entries)) {
            throw new InvalidArgumentException('non-nullable flavor_text_entries cannot be null');
        }
        $this->container['flavor_text_entries'] = $flavor_text_entries;

        return $this;
    }

    /**
     * Gets genera
     *
     * @return \OpenAPI\Client\Model\PokemonSpeciesDetailGeneraInner[]
     */
    public function getGenera(): array
    {
        return $this->container['genera'];
    }

    /**
     * Sets genera
     *
     * @param \OpenAPI\Client\Model\PokemonSpeciesDetailGeneraInner[] $genera genera
     *
     * @return $this
     */
    public function setGenera(array $genera): static
    {
        if (is_null($genera)) {
            throw new InvalidArgumentException('non-nullable genera cannot be null');
        }
        $this->container['genera'] = $genera;

        return $this;
    }

    /**
     * Gets varieties
     *
     * @return \OpenAPI\Client\Model\PokemonSpeciesDetailVarietiesInner[]
     */
    public function getVarieties(): array
    {
        return $this->container['varieties'];
    }

    /**
     * Sets varieties
     *
     * @param \OpenAPI\Client\Model\PokemonSpeciesDetailVarietiesInner[] $varieties varieties
     *
     * @return $this
     */
    public function setVarieties(array $varieties): static
    {
        if (is_null($varieties)) {
            throw new InvalidArgumentException('non-nullable varieties cannot be null');
        }
        $this->container['varieties'] = $varieties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


