<?php
/**
 * PokemonDetail
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PokéAPI
 *
 * All the Pokémon data you'll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We've covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.
 *
 * The version of the OpenAPI document: 2.7.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * PokemonDetail Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PokemonDetail implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PokemonDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'base_experience' => 'int',
        'height' => 'int',
        'is_default' => 'bool',
        'order' => 'int',
        'weight' => 'int',
        'abilities' => '\OpenAPI\Client\Model\PokemonDetailAbilitiesInner[]',
        'past_abilities' => '\OpenAPI\Client\Model\PokemonDetailPastAbilitiesInner[]',
        'forms' => '\OpenAPI\Client\Model\PokemonFormSummary[]',
        'game_indices' => '\OpenAPI\Client\Model\PokemonGameIndex[]',
        'held_items' => '\OpenAPI\Client\Model\PokemonDetailHeldItems',
        'location_area_encounters' => 'string',
        'moves' => '\OpenAPI\Client\Model\PokemonDetailMovesInner[]',
        'species' => '\OpenAPI\Client\Model\PokemonSpeciesSummary',
        'sprites' => '\OpenAPI\Client\Model\PokemonDetailSprites',
        'cries' => '\OpenAPI\Client\Model\PokemonDetailCries',
        'stats' => '\OpenAPI\Client\Model\PokemonStat[]',
        'types' => '\OpenAPI\Client\Model\PokemonDetailTypesInner[]',
        'past_types' => '\OpenAPI\Client\Model\PokemonDetailPastTypesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'base_experience' => null,
        'height' => null,
        'is_default' => null,
        'order' => null,
        'weight' => null,
        'abilities' => null,
        'past_abilities' => null,
        'forms' => null,
        'game_indices' => null,
        'held_items' => null,
        'location_area_encounters' => null,
        'moves' => null,
        'species' => null,
        'sprites' => null,
        'cries' => null,
        'stats' => null,
        'types' => null,
        'past_types' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'base_experience' => true,
        'height' => true,
        'is_default' => false,
        'order' => true,
        'weight' => true,
        'abilities' => false,
        'past_abilities' => false,
        'forms' => false,
        'game_indices' => false,
        'held_items' => false,
        'location_area_encounters' => false,
        'moves' => false,
        'species' => false,
        'sprites' => false,
        'cries' => false,
        'stats' => false,
        'types' => false,
        'past_types' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'base_experience' => 'base_experience',
        'height' => 'height',
        'is_default' => 'is_default',
        'order' => 'order',
        'weight' => 'weight',
        'abilities' => 'abilities',
        'past_abilities' => 'past_abilities',
        'forms' => 'forms',
        'game_indices' => 'game_indices',
        'held_items' => 'held_items',
        'location_area_encounters' => 'location_area_encounters',
        'moves' => 'moves',
        'species' => 'species',
        'sprites' => 'sprites',
        'cries' => 'cries',
        'stats' => 'stats',
        'types' => 'types',
        'past_types' => 'past_types'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'base_experience' => 'setBaseExperience',
        'height' => 'setHeight',
        'is_default' => 'setIsDefault',
        'order' => 'setOrder',
        'weight' => 'setWeight',
        'abilities' => 'setAbilities',
        'past_abilities' => 'setPastAbilities',
        'forms' => 'setForms',
        'game_indices' => 'setGameIndices',
        'held_items' => 'setHeldItems',
        'location_area_encounters' => 'setLocationAreaEncounters',
        'moves' => 'setMoves',
        'species' => 'setSpecies',
        'sprites' => 'setSprites',
        'cries' => 'setCries',
        'stats' => 'setStats',
        'types' => 'setTypes',
        'past_types' => 'setPastTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'base_experience' => 'getBaseExperience',
        'height' => 'getHeight',
        'is_default' => 'getIsDefault',
        'order' => 'getOrder',
        'weight' => 'getWeight',
        'abilities' => 'getAbilities',
        'past_abilities' => 'getPastAbilities',
        'forms' => 'getForms',
        'game_indices' => 'getGameIndices',
        'held_items' => 'getHeldItems',
        'location_area_encounters' => 'getLocationAreaEncounters',
        'moves' => 'getMoves',
        'species' => 'getSpecies',
        'sprites' => 'getSprites',
        'cries' => 'getCries',
        'stats' => 'getStats',
        'types' => 'getTypes',
        'past_types' => 'getPastTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('base_experience', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('is_default', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('abilities', $data ?? [], null);
        $this->setIfExists('past_abilities', $data ?? [], null);
        $this->setIfExists('forms', $data ?? [], null);
        $this->setIfExists('game_indices', $data ?? [], null);
        $this->setIfExists('held_items', $data ?? [], null);
        $this->setIfExists('location_area_encounters', $data ?? [], null);
        $this->setIfExists('moves', $data ?? [], null);
        $this->setIfExists('species', $data ?? [], null);
        $this->setIfExists('sprites', $data ?? [], null);
        $this->setIfExists('cries', $data ?? [], null);
        $this->setIfExists('stats', $data ?? [], null);
        $this->setIfExists('types', $data ?? [], null);
        $this->setIfExists('past_types', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['abilities'] === null) {
            $invalidProperties[] = "'abilities' can't be null";
        }
        if ($this->container['past_abilities'] === null) {
            $invalidProperties[] = "'past_abilities' can't be null";
        }
        if ($this->container['forms'] === null) {
            $invalidProperties[] = "'forms' can't be null";
        }
        if ($this->container['game_indices'] === null) {
            $invalidProperties[] = "'game_indices' can't be null";
        }
        if ($this->container['held_items'] === null) {
            $invalidProperties[] = "'held_items' can't be null";
        }
        if ($this->container['location_area_encounters'] === null) {
            $invalidProperties[] = "'location_area_encounters' can't be null";
        }
        if ($this->container['moves'] === null) {
            $invalidProperties[] = "'moves' can't be null";
        }
        if ($this->container['species'] === null) {
            $invalidProperties[] = "'species' can't be null";
        }
        if ($this->container['sprites'] === null) {
            $invalidProperties[] = "'sprites' can't be null";
        }
        if ($this->container['cries'] === null) {
            $invalidProperties[] = "'cries' can't be null";
        }
        if ($this->container['stats'] === null) {
            $invalidProperties[] = "'stats' can't be null";
        }
        if ($this->container['types'] === null) {
            $invalidProperties[] = "'types' can't be null";
        }
        if ($this->container['past_types'] === null) {
            $invalidProperties[] = "'past_types' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId(int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new InvalidArgumentException('invalid length for $name when calling PokemonDetail., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets base_experience
     *
     * @return int|null
     */
    public function getBaseExperience(): ?int
    {
        return $this->container['base_experience'];
    }

    /**
     * Sets base_experience
     *
     * @param int|null $base_experience base_experience
     *
     * @return $this
     */
    public function setBaseExperience(?int $base_experience): static
    {
        if (is_null($base_experience)) {
            array_push($this->openAPINullablesSetToNull, 'base_experience');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('base_experience', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['base_experience'] = $base_experience;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight(): ?int
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height height
     *
     * @return $this
     */
    public function setHeight(?int $height): static
    {
        if (is_null($height)) {
            array_push($this->openAPINullablesSetToNull, 'height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault(): ?bool
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default is_default
     *
     * @return $this
     */
    public function setIsDefault(?bool $is_default): static
    {
        if (is_null($is_default)) {
            throw new InvalidArgumentException('non-nullable is_default cannot be null');
        }
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder(): ?int
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order order
     *
     * @return $this
     */
    public function setOrder(?int $order): static
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight(): ?int
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight weight
     *
     * @return $this
     */
    public function setWeight(?int $weight): static
    {
        if (is_null($weight)) {
            array_push($this->openAPINullablesSetToNull, 'weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets abilities
     *
     * @return \OpenAPI\Client\Model\PokemonDetailAbilitiesInner[]
     */
    public function getAbilities(): array
    {
        return $this->container['abilities'];
    }

    /**
     * Sets abilities
     *
     * @param \OpenAPI\Client\Model\PokemonDetailAbilitiesInner[] $abilities abilities
     *
     * @return $this
     */
    public function setAbilities(array $abilities): static
    {
        if (is_null($abilities)) {
            throw new InvalidArgumentException('non-nullable abilities cannot be null');
        }
        $this->container['abilities'] = $abilities;

        return $this;
    }

    /**
     * Gets past_abilities
     *
     * @return \OpenAPI\Client\Model\PokemonDetailPastAbilitiesInner[]
     */
    public function getPastAbilities(): array
    {
        return $this->container['past_abilities'];
    }

    /**
     * Sets past_abilities
     *
     * @param \OpenAPI\Client\Model\PokemonDetailPastAbilitiesInner[] $past_abilities past_abilities
     *
     * @return $this
     */
    public function setPastAbilities(array $past_abilities): static
    {
        if (is_null($past_abilities)) {
            throw new InvalidArgumentException('non-nullable past_abilities cannot be null');
        }
        $this->container['past_abilities'] = $past_abilities;

        return $this;
    }

    /**
     * Gets forms
     *
     * @return \OpenAPI\Client\Model\PokemonFormSummary[]
     */
    public function getForms(): array
    {
        return $this->container['forms'];
    }

    /**
     * Sets forms
     *
     * @param \OpenAPI\Client\Model\PokemonFormSummary[] $forms forms
     *
     * @return $this
     */
    public function setForms(array $forms): static
    {
        if (is_null($forms)) {
            throw new InvalidArgumentException('non-nullable forms cannot be null');
        }
        $this->container['forms'] = $forms;

        return $this;
    }

    /**
     * Gets game_indices
     *
     * @return \OpenAPI\Client\Model\PokemonGameIndex[]
     */
    public function getGameIndices(): array
    {
        return $this->container['game_indices'];
    }

    /**
     * Sets game_indices
     *
     * @param \OpenAPI\Client\Model\PokemonGameIndex[] $game_indices game_indices
     *
     * @return $this
     */
    public function setGameIndices(array $game_indices): static
    {
        if (is_null($game_indices)) {
            throw new InvalidArgumentException('non-nullable game_indices cannot be null');
        }
        $this->container['game_indices'] = $game_indices;

        return $this;
    }

    /**
     * Gets held_items
     *
     * @return \OpenAPI\Client\Model\PokemonDetailHeldItems
     */
    public function getHeldItems(): \OpenAPI\Client\Model\PokemonDetailHeldItems
    {
        return $this->container['held_items'];
    }

    /**
     * Sets held_items
     *
     * @param \OpenAPI\Client\Model\PokemonDetailHeldItems $held_items held_items
     *
     * @return $this
     */
    public function setHeldItems(\OpenAPI\Client\Model\PokemonDetailHeldItems $held_items): static
    {
        if (is_null($held_items)) {
            throw new InvalidArgumentException('non-nullable held_items cannot be null');
        }
        $this->container['held_items'] = $held_items;

        return $this;
    }

    /**
     * Gets location_area_encounters
     *
     * @return string
     */
    public function getLocationAreaEncounters(): string
    {
        return $this->container['location_area_encounters'];
    }

    /**
     * Sets location_area_encounters
     *
     * @param string $location_area_encounters location_area_encounters
     *
     * @return $this
     */
    public function setLocationAreaEncounters(string $location_area_encounters): static
    {
        if (is_null($location_area_encounters)) {
            throw new InvalidArgumentException('non-nullable location_area_encounters cannot be null');
        }
        $this->container['location_area_encounters'] = $location_area_encounters;

        return $this;
    }

    /**
     * Gets moves
     *
     * @return \OpenAPI\Client\Model\PokemonDetailMovesInner[]
     */
    public function getMoves(): array
    {
        return $this->container['moves'];
    }

    /**
     * Sets moves
     *
     * @param \OpenAPI\Client\Model\PokemonDetailMovesInner[] $moves moves
     *
     * @return $this
     */
    public function setMoves(array $moves): static
    {
        if (is_null($moves)) {
            throw new InvalidArgumentException('non-nullable moves cannot be null');
        }
        $this->container['moves'] = $moves;

        return $this;
    }

    /**
     * Gets species
     *
     * @return \OpenAPI\Client\Model\PokemonSpeciesSummary
     */
    public function getSpecies(): \OpenAPI\Client\Model\PokemonSpeciesSummary
    {
        return $this->container['species'];
    }

    /**
     * Sets species
     *
     * @param \OpenAPI\Client\Model\PokemonSpeciesSummary $species species
     *
     * @return $this
     */
    public function setSpecies(\OpenAPI\Client\Model\PokemonSpeciesSummary $species): static
    {
        if (is_null($species)) {
            throw new InvalidArgumentException('non-nullable species cannot be null');
        }
        $this->container['species'] = $species;

        return $this;
    }

    /**
     * Gets sprites
     *
     * @return \OpenAPI\Client\Model\PokemonDetailSprites
     */
    public function getSprites(): \OpenAPI\Client\Model\PokemonDetailSprites
    {
        return $this->container['sprites'];
    }

    /**
     * Sets sprites
     *
     * @param \OpenAPI\Client\Model\PokemonDetailSprites $sprites sprites
     *
     * @return $this
     */
    public function setSprites(\OpenAPI\Client\Model\PokemonDetailSprites $sprites): static
    {
        if (is_null($sprites)) {
            throw new InvalidArgumentException('non-nullable sprites cannot be null');
        }
        $this->container['sprites'] = $sprites;

        return $this;
    }

    /**
     * Gets cries
     *
     * @return \OpenAPI\Client\Model\PokemonDetailCries
     */
    public function getCries(): \OpenAPI\Client\Model\PokemonDetailCries
    {
        return $this->container['cries'];
    }

    /**
     * Sets cries
     *
     * @param \OpenAPI\Client\Model\PokemonDetailCries $cries cries
     *
     * @return $this
     */
    public function setCries(\OpenAPI\Client\Model\PokemonDetailCries $cries): static
    {
        if (is_null($cries)) {
            throw new InvalidArgumentException('non-nullable cries cannot be null');
        }
        $this->container['cries'] = $cries;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \OpenAPI\Client\Model\PokemonStat[]
     */
    public function getStats(): array
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \OpenAPI\Client\Model\PokemonStat[] $stats stats
     *
     * @return $this
     */
    public function setStats(array $stats): static
    {
        if (is_null($stats)) {
            throw new InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets types
     *
     * @return \OpenAPI\Client\Model\PokemonDetailTypesInner[]
     */
    public function getTypes(): array
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param \OpenAPI\Client\Model\PokemonDetailTypesInner[] $types types
     *
     * @return $this
     */
    public function setTypes(array $types): static
    {
        if (is_null($types)) {
            throw new InvalidArgumentException('non-nullable types cannot be null');
        }
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets past_types
     *
     * @return \OpenAPI\Client\Model\PokemonDetailPastTypesInner[]
     */
    public function getPastTypes(): array
    {
        return $this->container['past_types'];
    }

    /**
     * Sets past_types
     *
     * @param \OpenAPI\Client\Model\PokemonDetailPastTypesInner[] $past_types past_types
     *
     * @return $this
     */
    public function setPastTypes(array $past_types): static
    {
        if (is_null($past_types)) {
            throw new InvalidArgumentException('non-nullable past_types cannot be null');
        }
        $this->container['past_types'] = $past_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


