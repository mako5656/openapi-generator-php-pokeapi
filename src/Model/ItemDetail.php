<?php
/**
 * ItemDetail
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PokéAPI
 *
 * All the Pokémon data you'll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We've covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.
 *
 * The version of the OpenAPI document: 2.7.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ItemDetail Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ItemDetail implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ItemDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'cost' => 'int',
        'fling_power' => 'int',
        'fling_effect' => '\OpenAPI\Client\Model\ItemFlingEffectSummary',
        'attributes' => '\OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]',
        'category' => '\OpenAPI\Client\Model\ItemCategorySummary',
        'effect_entries' => '\OpenAPI\Client\Model\ItemEffectText[]',
        'flavor_text_entries' => '\OpenAPI\Client\Model\ItemFlavorText[]',
        'game_indices' => '\OpenAPI\Client\Model\ItemGameIndex[]',
        'names' => '\OpenAPI\Client\Model\ItemName[]',
        'held_by_pokemon' => '\OpenAPI\Client\Model\ItemDetailHeldByPokemonInner[]',
        'sprites' => '\OpenAPI\Client\Model\ItemDetailSprites',
        'baby_trigger_for' => '\OpenAPI\Client\Model\ItemDetailBabyTriggerFor',
        'machines' => '\OpenAPI\Client\Model\ItemDetailMachinesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'cost' => null,
        'fling_power' => null,
        'fling_effect' => null,
        'attributes' => null,
        'category' => null,
        'effect_entries' => null,
        'flavor_text_entries' => null,
        'game_indices' => null,
        'names' => null,
        'held_by_pokemon' => null,
        'sprites' => null,
        'baby_trigger_for' => null,
        'machines' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'cost' => true,
        'fling_power' => true,
        'fling_effect' => false,
        'attributes' => false,
        'category' => false,
        'effect_entries' => false,
        'flavor_text_entries' => false,
        'game_indices' => false,
        'names' => false,
        'held_by_pokemon' => false,
        'sprites' => false,
        'baby_trigger_for' => false,
        'machines' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'cost' => 'cost',
        'fling_power' => 'fling_power',
        'fling_effect' => 'fling_effect',
        'attributes' => 'attributes',
        'category' => 'category',
        'effect_entries' => 'effect_entries',
        'flavor_text_entries' => 'flavor_text_entries',
        'game_indices' => 'game_indices',
        'names' => 'names',
        'held_by_pokemon' => 'held_by_pokemon',
        'sprites' => 'sprites',
        'baby_trigger_for' => 'baby_trigger_for',
        'machines' => 'machines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'cost' => 'setCost',
        'fling_power' => 'setFlingPower',
        'fling_effect' => 'setFlingEffect',
        'attributes' => 'setAttributes',
        'category' => 'setCategory',
        'effect_entries' => 'setEffectEntries',
        'flavor_text_entries' => 'setFlavorTextEntries',
        'game_indices' => 'setGameIndices',
        'names' => 'setNames',
        'held_by_pokemon' => 'setHeldByPokemon',
        'sprites' => 'setSprites',
        'baby_trigger_for' => 'setBabyTriggerFor',
        'machines' => 'setMachines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'cost' => 'getCost',
        'fling_power' => 'getFlingPower',
        'fling_effect' => 'getFlingEffect',
        'attributes' => 'getAttributes',
        'category' => 'getCategory',
        'effect_entries' => 'getEffectEntries',
        'flavor_text_entries' => 'getFlavorTextEntries',
        'game_indices' => 'getGameIndices',
        'names' => 'getNames',
        'held_by_pokemon' => 'getHeldByPokemon',
        'sprites' => 'getSprites',
        'baby_trigger_for' => 'getBabyTriggerFor',
        'machines' => 'getMachines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('fling_power', $data ?? [], null);
        $this->setIfExists('fling_effect', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('effect_entries', $data ?? [], null);
        $this->setIfExists('flavor_text_entries', $data ?? [], null);
        $this->setIfExists('game_indices', $data ?? [], null);
        $this->setIfExists('names', $data ?? [], null);
        $this->setIfExists('held_by_pokemon', $data ?? [], null);
        $this->setIfExists('sprites', $data ?? [], null);
        $this->setIfExists('baby_trigger_for', $data ?? [], null);
        $this->setIfExists('machines', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['fling_effect'] === null) {
            $invalidProperties[] = "'fling_effect' can't be null";
        }
        if ($this->container['attributes'] === null) {
            $invalidProperties[] = "'attributes' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['effect_entries'] === null) {
            $invalidProperties[] = "'effect_entries' can't be null";
        }
        if ($this->container['flavor_text_entries'] === null) {
            $invalidProperties[] = "'flavor_text_entries' can't be null";
        }
        if ($this->container['game_indices'] === null) {
            $invalidProperties[] = "'game_indices' can't be null";
        }
        if ($this->container['names'] === null) {
            $invalidProperties[] = "'names' can't be null";
        }
        if ($this->container['held_by_pokemon'] === null) {
            $invalidProperties[] = "'held_by_pokemon' can't be null";
        }
        if ($this->container['sprites'] === null) {
            $invalidProperties[] = "'sprites' can't be null";
        }
        if ($this->container['baby_trigger_for'] === null) {
            $invalidProperties[] = "'baby_trigger_for' can't be null";
        }
        if ($this->container['machines'] === null) {
            $invalidProperties[] = "'machines' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId(int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new InvalidArgumentException('invalid length for $name when calling ItemDetail., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return int|null
     */
    public function getCost(): ?int
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param int|null $cost cost
     *
     * @return $this
     */
    public function setCost(?int $cost): static
    {
        if (is_null($cost)) {
            array_push($this->openAPINullablesSetToNull, 'cost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets fling_power
     *
     * @return int|null
     */
    public function getFlingPower(): ?int
    {
        return $this->container['fling_power'];
    }

    /**
     * Sets fling_power
     *
     * @param int|null $fling_power fling_power
     *
     * @return $this
     */
    public function setFlingPower(?int $fling_power): static
    {
        if (is_null($fling_power)) {
            array_push($this->openAPINullablesSetToNull, 'fling_power');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fling_power', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fling_power'] = $fling_power;

        return $this;
    }

    /**
     * Gets fling_effect
     *
     * @return \OpenAPI\Client\Model\ItemFlingEffectSummary
     */
    public function getFlingEffect(): \OpenAPI\Client\Model\ItemFlingEffectSummary
    {
        return $this->container['fling_effect'];
    }

    /**
     * Sets fling_effect
     *
     * @param \OpenAPI\Client\Model\ItemFlingEffectSummary $fling_effect fling_effect
     *
     * @return $this
     */
    public function setFlingEffect(\OpenAPI\Client\Model\ItemFlingEffectSummary $fling_effect): static
    {
        if (is_null($fling_effect)) {
            throw new InvalidArgumentException('non-nullable fling_effect cannot be null');
        }
        $this->container['fling_effect'] = $fling_effect;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]
     */
    public function getAttributes(): array
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[] $attributes attributes
     *
     * @return $this
     */
    public function setAttributes(array $attributes): static
    {
        if (is_null($attributes)) {
            throw new InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \OpenAPI\Client\Model\ItemCategorySummary
     */
    public function getCategory(): \OpenAPI\Client\Model\ItemCategorySummary
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \OpenAPI\Client\Model\ItemCategorySummary $category category
     *
     * @return $this
     */
    public function setCategory(\OpenAPI\Client\Model\ItemCategorySummary $category): static
    {
        if (is_null($category)) {
            throw new InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets effect_entries
     *
     * @return \OpenAPI\Client\Model\ItemEffectText[]
     */
    public function getEffectEntries(): array
    {
        return $this->container['effect_entries'];
    }

    /**
     * Sets effect_entries
     *
     * @param \OpenAPI\Client\Model\ItemEffectText[] $effect_entries effect_entries
     *
     * @return $this
     */
    public function setEffectEntries(array $effect_entries): static
    {
        if (is_null($effect_entries)) {
            throw new InvalidArgumentException('non-nullable effect_entries cannot be null');
        }
        $this->container['effect_entries'] = $effect_entries;

        return $this;
    }

    /**
     * Gets flavor_text_entries
     *
     * @return \OpenAPI\Client\Model\ItemFlavorText[]
     */
    public function getFlavorTextEntries(): array
    {
        return $this->container['flavor_text_entries'];
    }

    /**
     * Sets flavor_text_entries
     *
     * @param \OpenAPI\Client\Model\ItemFlavorText[] $flavor_text_entries flavor_text_entries
     *
     * @return $this
     */
    public function setFlavorTextEntries(array $flavor_text_entries): static
    {
        if (is_null($flavor_text_entries)) {
            throw new InvalidArgumentException('non-nullable flavor_text_entries cannot be null');
        }
        $this->container['flavor_text_entries'] = $flavor_text_entries;

        return $this;
    }

    /**
     * Gets game_indices
     *
     * @return \OpenAPI\Client\Model\ItemGameIndex[]
     */
    public function getGameIndices(): array
    {
        return $this->container['game_indices'];
    }

    /**
     * Sets game_indices
     *
     * @param \OpenAPI\Client\Model\ItemGameIndex[] $game_indices game_indices
     *
     * @return $this
     */
    public function setGameIndices(array $game_indices): static
    {
        if (is_null($game_indices)) {
            throw new InvalidArgumentException('non-nullable game_indices cannot be null');
        }
        $this->container['game_indices'] = $game_indices;

        return $this;
    }

    /**
     * Gets names
     *
     * @return \OpenAPI\Client\Model\ItemName[]
     */
    public function getNames(): array
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param \OpenAPI\Client\Model\ItemName[] $names names
     *
     * @return $this
     */
    public function setNames(array $names): static
    {
        if (is_null($names)) {
            throw new InvalidArgumentException('non-nullable names cannot be null');
        }
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets held_by_pokemon
     *
     * @return \OpenAPI\Client\Model\ItemDetailHeldByPokemonInner[]
     */
    public function getHeldByPokemon(): array
    {
        return $this->container['held_by_pokemon'];
    }

    /**
     * Sets held_by_pokemon
     *
     * @param \OpenAPI\Client\Model\ItemDetailHeldByPokemonInner[] $held_by_pokemon held_by_pokemon
     *
     * @return $this
     */
    public function setHeldByPokemon(array $held_by_pokemon): static
    {
        if (is_null($held_by_pokemon)) {
            throw new InvalidArgumentException('non-nullable held_by_pokemon cannot be null');
        }
        $this->container['held_by_pokemon'] = $held_by_pokemon;

        return $this;
    }

    /**
     * Gets sprites
     *
     * @return \OpenAPI\Client\Model\ItemDetailSprites
     */
    public function getSprites(): \OpenAPI\Client\Model\ItemDetailSprites
    {
        return $this->container['sprites'];
    }

    /**
     * Sets sprites
     *
     * @param \OpenAPI\Client\Model\ItemDetailSprites $sprites sprites
     *
     * @return $this
     */
    public function setSprites(\OpenAPI\Client\Model\ItemDetailSprites $sprites): static
    {
        if (is_null($sprites)) {
            throw new InvalidArgumentException('non-nullable sprites cannot be null');
        }
        $this->container['sprites'] = $sprites;

        return $this;
    }

    /**
     * Gets baby_trigger_for
     *
     * @return \OpenAPI\Client\Model\ItemDetailBabyTriggerFor
     */
    public function getBabyTriggerFor(): \OpenAPI\Client\Model\ItemDetailBabyTriggerFor
    {
        return $this->container['baby_trigger_for'];
    }

    /**
     * Sets baby_trigger_for
     *
     * @param \OpenAPI\Client\Model\ItemDetailBabyTriggerFor $baby_trigger_for baby_trigger_for
     *
     * @return $this
     */
    public function setBabyTriggerFor(\OpenAPI\Client\Model\ItemDetailBabyTriggerFor $baby_trigger_for): static
    {
        if (is_null($baby_trigger_for)) {
            throw new InvalidArgumentException('non-nullable baby_trigger_for cannot be null');
        }
        $this->container['baby_trigger_for'] = $baby_trigger_for;

        return $this;
    }

    /**
     * Gets machines
     *
     * @return \OpenAPI\Client\Model\ItemDetailMachinesInner[]
     */
    public function getMachines(): array
    {
        return $this->container['machines'];
    }

    /**
     * Sets machines
     *
     * @param \OpenAPI\Client\Model\ItemDetailMachinesInner[] $machines machines
     *
     * @return $this
     */
    public function setMachines(array $machines): static
    {
        if (is_null($machines)) {
            throw new InvalidArgumentException('non-nullable machines cannot be null');
        }
        $this->container['machines'] = $machines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


