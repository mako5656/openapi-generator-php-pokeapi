<?php
/**
 * GenerationDetail
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PokéAPI
 *
 * All the Pokémon data you'll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We've covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.
 *
 * The version of the OpenAPI document: 2.7.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * GenerationDetail Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GenerationDetail implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GenerationDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'abilities' => '\OpenAPI\Client\Model\AbilitySummary[]',
        'main_region' => '\OpenAPI\Client\Model\RegionSummary',
        'moves' => '\OpenAPI\Client\Model\MoveSummary[]',
        'names' => '\OpenAPI\Client\Model\GenerationName[]',
        'pokemon_species' => '\OpenAPI\Client\Model\PokemonSpeciesSummary[]',
        'types' => '\OpenAPI\Client\Model\TypeSummary[]',
        'version_groups' => '\OpenAPI\Client\Model\VersionGroupSummary[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'abilities' => null,
        'main_region' => null,
        'moves' => null,
        'names' => null,
        'pokemon_species' => null,
        'types' => null,
        'version_groups' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'abilities' => false,
        'main_region' => false,
        'moves' => false,
        'names' => false,
        'pokemon_species' => false,
        'types' => false,
        'version_groups' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'abilities' => 'abilities',
        'main_region' => 'main_region',
        'moves' => 'moves',
        'names' => 'names',
        'pokemon_species' => 'pokemon_species',
        'types' => 'types',
        'version_groups' => 'version_groups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'abilities' => 'setAbilities',
        'main_region' => 'setMainRegion',
        'moves' => 'setMoves',
        'names' => 'setNames',
        'pokemon_species' => 'setPokemonSpecies',
        'types' => 'setTypes',
        'version_groups' => 'setVersionGroups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'abilities' => 'getAbilities',
        'main_region' => 'getMainRegion',
        'moves' => 'getMoves',
        'names' => 'getNames',
        'pokemon_species' => 'getPokemonSpecies',
        'types' => 'getTypes',
        'version_groups' => 'getVersionGroups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('abilities', $data ?? [], null);
        $this->setIfExists('main_region', $data ?? [], null);
        $this->setIfExists('moves', $data ?? [], null);
        $this->setIfExists('names', $data ?? [], null);
        $this->setIfExists('pokemon_species', $data ?? [], null);
        $this->setIfExists('types', $data ?? [], null);
        $this->setIfExists('version_groups', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['abilities'] === null) {
            $invalidProperties[] = "'abilities' can't be null";
        }
        if ($this->container['main_region'] === null) {
            $invalidProperties[] = "'main_region' can't be null";
        }
        if ($this->container['moves'] === null) {
            $invalidProperties[] = "'moves' can't be null";
        }
        if ($this->container['names'] === null) {
            $invalidProperties[] = "'names' can't be null";
        }
        if ($this->container['pokemon_species'] === null) {
            $invalidProperties[] = "'pokemon_species' can't be null";
        }
        if ($this->container['types'] === null) {
            $invalidProperties[] = "'types' can't be null";
        }
        if ($this->container['version_groups'] === null) {
            $invalidProperties[] = "'version_groups' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId(int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new InvalidArgumentException('invalid length for $name when calling GenerationDetail., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets abilities
     *
     * @return \OpenAPI\Client\Model\AbilitySummary[]
     */
    public function getAbilities(): array
    {
        return $this->container['abilities'];
    }

    /**
     * Sets abilities
     *
     * @param \OpenAPI\Client\Model\AbilitySummary[] $abilities abilities
     *
     * @return $this
     */
    public function setAbilities(array $abilities): static
    {
        if (is_null($abilities)) {
            throw new InvalidArgumentException('non-nullable abilities cannot be null');
        }
        $this->container['abilities'] = $abilities;

        return $this;
    }

    /**
     * Gets main_region
     *
     * @return \OpenAPI\Client\Model\RegionSummary
     */
    public function getMainRegion(): \OpenAPI\Client\Model\RegionSummary
    {
        return $this->container['main_region'];
    }

    /**
     * Sets main_region
     *
     * @param \OpenAPI\Client\Model\RegionSummary $main_region main_region
     *
     * @return $this
     */
    public function setMainRegion(\OpenAPI\Client\Model\RegionSummary $main_region): static
    {
        if (is_null($main_region)) {
            throw new InvalidArgumentException('non-nullable main_region cannot be null');
        }
        $this->container['main_region'] = $main_region;

        return $this;
    }

    /**
     * Gets moves
     *
     * @return \OpenAPI\Client\Model\MoveSummary[]
     */
    public function getMoves(): array
    {
        return $this->container['moves'];
    }

    /**
     * Sets moves
     *
     * @param \OpenAPI\Client\Model\MoveSummary[] $moves moves
     *
     * @return $this
     */
    public function setMoves(array $moves): static
    {
        if (is_null($moves)) {
            throw new InvalidArgumentException('non-nullable moves cannot be null');
        }
        $this->container['moves'] = $moves;

        return $this;
    }

    /**
     * Gets names
     *
     * @return \OpenAPI\Client\Model\GenerationName[]
     */
    public function getNames(): array
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param \OpenAPI\Client\Model\GenerationName[] $names names
     *
     * @return $this
     */
    public function setNames(array $names): static
    {
        if (is_null($names)) {
            throw new InvalidArgumentException('non-nullable names cannot be null');
        }
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets pokemon_species
     *
     * @return \OpenAPI\Client\Model\PokemonSpeciesSummary[]
     */
    public function getPokemonSpecies(): array
    {
        return $this->container['pokemon_species'];
    }

    /**
     * Sets pokemon_species
     *
     * @param \OpenAPI\Client\Model\PokemonSpeciesSummary[] $pokemon_species pokemon_species
     *
     * @return $this
     */
    public function setPokemonSpecies(array $pokemon_species): static
    {
        if (is_null($pokemon_species)) {
            throw new InvalidArgumentException('non-nullable pokemon_species cannot be null');
        }
        $this->container['pokemon_species'] = $pokemon_species;

        return $this;
    }

    /**
     * Gets types
     *
     * @return \OpenAPI\Client\Model\TypeSummary[]
     */
    public function getTypes(): array
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param \OpenAPI\Client\Model\TypeSummary[] $types types
     *
     * @return $this
     */
    public function setTypes(array $types): static
    {
        if (is_null($types)) {
            throw new InvalidArgumentException('non-nullable types cannot be null');
        }
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets version_groups
     *
     * @return \OpenAPI\Client\Model\VersionGroupSummary[]
     */
    public function getVersionGroups(): array
    {
        return $this->container['version_groups'];
    }

    /**
     * Sets version_groups
     *
     * @param \OpenAPI\Client\Model\VersionGroupSummary[] $version_groups version_groups
     *
     * @return $this
     */
    public function setVersionGroups(array $version_groups): static
    {
        if (is_null($version_groups)) {
            throw new InvalidArgumentException('non-nullable version_groups cannot be null');
        }
        $this->container['version_groups'] = $version_groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


