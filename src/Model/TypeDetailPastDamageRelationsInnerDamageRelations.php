<?php
/**
 * TypeDetailPastDamageRelationsInnerDamageRelations
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PokéAPI
 *
 * All the Pokémon data you'll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We've covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.
 *
 * The version of the OpenAPI document: 2.7.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * TypeDetailPastDamageRelationsInnerDamageRelations Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class TypeDetailPastDamageRelationsInnerDamageRelations implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'TypeDetail_past_damage_relations_inner_damage_relations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'no_damage_to' => '\OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]',
        'half_damage_to' => '\OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]',
        'double_damage_to' => '\OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]',
        'no_damage_from' => '\OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]',
        'half_damage_from' => '\OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]',
        'double_damage_from' => '\OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'no_damage_to' => null,
        'half_damage_to' => null,
        'double_damage_to' => null,
        'no_damage_from' => null,
        'half_damage_from' => null,
        'double_damage_from' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'no_damage_to' => false,
        'half_damage_to' => false,
        'double_damage_to' => false,
        'no_damage_from' => false,
        'half_damage_from' => false,
        'double_damage_from' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'no_damage_to' => 'no_damage_to',
        'half_damage_to' => 'half_damage_to',
        'double_damage_to' => 'double_damage_to',
        'no_damage_from' => 'no_damage_from',
        'half_damage_from' => 'half_damage_from',
        'double_damage_from' => 'double_damage_from'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'no_damage_to' => 'setNoDamageTo',
        'half_damage_to' => 'setHalfDamageTo',
        'double_damage_to' => 'setDoubleDamageTo',
        'no_damage_from' => 'setNoDamageFrom',
        'half_damage_from' => 'setHalfDamageFrom',
        'double_damage_from' => 'setDoubleDamageFrom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'no_damage_to' => 'getNoDamageTo',
        'half_damage_to' => 'getHalfDamageTo',
        'double_damage_to' => 'getDoubleDamageTo',
        'no_damage_from' => 'getNoDamageFrom',
        'half_damage_from' => 'getHalfDamageFrom',
        'double_damage_from' => 'getDoubleDamageFrom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('no_damage_to', $data ?? [], null);
        $this->setIfExists('half_damage_to', $data ?? [], null);
        $this->setIfExists('double_damage_to', $data ?? [], null);
        $this->setIfExists('no_damage_from', $data ?? [], null);
        $this->setIfExists('half_damage_from', $data ?? [], null);
        $this->setIfExists('double_damage_from', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['no_damage_to'] === null) {
            $invalidProperties[] = "'no_damage_to' can't be null";
        }
        if ($this->container['half_damage_to'] === null) {
            $invalidProperties[] = "'half_damage_to' can't be null";
        }
        if ($this->container['double_damage_to'] === null) {
            $invalidProperties[] = "'double_damage_to' can't be null";
        }
        if ($this->container['no_damage_from'] === null) {
            $invalidProperties[] = "'no_damage_from' can't be null";
        }
        if ($this->container['half_damage_from'] === null) {
            $invalidProperties[] = "'half_damage_from' can't be null";
        }
        if ($this->container['double_damage_from'] === null) {
            $invalidProperties[] = "'double_damage_from' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets no_damage_to
     *
     * @return \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]
     */
    public function getNoDamageTo(): array
    {
        return $this->container['no_damage_to'];
    }

    /**
     * Sets no_damage_to
     *
     * @param \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[] $no_damage_to no_damage_to
     *
     * @return $this
     */
    public function setNoDamageTo(array $no_damage_to): static
    {
        if (is_null($no_damage_to)) {
            throw new InvalidArgumentException('non-nullable no_damage_to cannot be null');
        }
        $this->container['no_damage_to'] = $no_damage_to;

        return $this;
    }

    /**
     * Gets half_damage_to
     *
     * @return \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]
     */
    public function getHalfDamageTo(): array
    {
        return $this->container['half_damage_to'];
    }

    /**
     * Sets half_damage_to
     *
     * @param \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[] $half_damage_to half_damage_to
     *
     * @return $this
     */
    public function setHalfDamageTo(array $half_damage_to): static
    {
        if (is_null($half_damage_to)) {
            throw new InvalidArgumentException('non-nullable half_damage_to cannot be null');
        }
        $this->container['half_damage_to'] = $half_damage_to;

        return $this;
    }

    /**
     * Gets double_damage_to
     *
     * @return \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]
     */
    public function getDoubleDamageTo(): array
    {
        return $this->container['double_damage_to'];
    }

    /**
     * Sets double_damage_to
     *
     * @param \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[] $double_damage_to double_damage_to
     *
     * @return $this
     */
    public function setDoubleDamageTo(array $double_damage_to): static
    {
        if (is_null($double_damage_to)) {
            throw new InvalidArgumentException('non-nullable double_damage_to cannot be null');
        }
        $this->container['double_damage_to'] = $double_damage_to;

        return $this;
    }

    /**
     * Gets no_damage_from
     *
     * @return \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]
     */
    public function getNoDamageFrom(): array
    {
        return $this->container['no_damage_from'];
    }

    /**
     * Sets no_damage_from
     *
     * @param \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[] $no_damage_from no_damage_from
     *
     * @return $this
     */
    public function setNoDamageFrom(array $no_damage_from): static
    {
        if (is_null($no_damage_from)) {
            throw new InvalidArgumentException('non-nullable no_damage_from cannot be null');
        }
        $this->container['no_damage_from'] = $no_damage_from;

        return $this;
    }

    /**
     * Gets half_damage_from
     *
     * @return \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]
     */
    public function getHalfDamageFrom(): array
    {
        return $this->container['half_damage_from'];
    }

    /**
     * Sets half_damage_from
     *
     * @param \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[] $half_damage_from half_damage_from
     *
     * @return $this
     */
    public function setHalfDamageFrom(array $half_damage_from): static
    {
        if (is_null($half_damage_from)) {
            throw new InvalidArgumentException('non-nullable half_damage_from cannot be null');
        }
        $this->container['half_damage_from'] = $half_damage_from;

        return $this;
    }

    /**
     * Gets double_damage_from
     *
     * @return \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[]
     */
    public function getDoubleDamageFrom(): array
    {
        return $this->container['double_damage_from'];
    }

    /**
     * Sets double_damage_from
     *
     * @param \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon[] $double_damage_from double_damage_from
     *
     * @return $this
     */
    public function setDoubleDamageFrom(array $double_damage_from): static
    {
        if (is_null($double_damage_from)) {
            throw new InvalidArgumentException('non-nullable double_damage_from cannot be null');
        }
        $this->container['double_damage_from'] = $double_damage_from;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


