<?php
/**
 * PokemonFormDetail
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PokéAPI
 *
 * All the Pokémon data you'll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We've covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.
 *
 * The version of the OpenAPI document: 2.7.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * PokemonFormDetail Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PokemonFormDetail implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PokemonFormDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'order' => 'int',
        'form_order' => 'int',
        'is_default' => 'bool',
        'is_battle_only' => 'bool',
        'is_mega' => 'bool',
        'form_name' => 'string',
        'pokemon' => '\OpenAPI\Client\Model\PokemonSummary',
        'sprites' => '\OpenAPI\Client\Model\PokemonFormDetailSprites',
        'version_group' => '\OpenAPI\Client\Model\VersionGroupSummary',
        'form_names' => '\OpenAPI\Client\Model\PokemonFormDetailFormNamesInner[]',
        'names' => '\OpenAPI\Client\Model\PokemonFormDetailFormNamesInner[]',
        'types' => '\OpenAPI\Client\Model\PokemonDetailTypesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'order' => null,
        'form_order' => null,
        'is_default' => null,
        'is_battle_only' => null,
        'is_mega' => null,
        'form_name' => null,
        'pokemon' => null,
        'sprites' => null,
        'version_group' => null,
        'form_names' => null,
        'names' => null,
        'types' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'order' => true,
        'form_order' => true,
        'is_default' => false,
        'is_battle_only' => false,
        'is_mega' => false,
        'form_name' => false,
        'pokemon' => false,
        'sprites' => false,
        'version_group' => false,
        'form_names' => false,
        'names' => false,
        'types' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'order' => 'order',
        'form_order' => 'form_order',
        'is_default' => 'is_default',
        'is_battle_only' => 'is_battle_only',
        'is_mega' => 'is_mega',
        'form_name' => 'form_name',
        'pokemon' => 'pokemon',
        'sprites' => 'sprites',
        'version_group' => 'version_group',
        'form_names' => 'form_names',
        'names' => 'names',
        'types' => 'types'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'order' => 'setOrder',
        'form_order' => 'setFormOrder',
        'is_default' => 'setIsDefault',
        'is_battle_only' => 'setIsBattleOnly',
        'is_mega' => 'setIsMega',
        'form_name' => 'setFormName',
        'pokemon' => 'setPokemon',
        'sprites' => 'setSprites',
        'version_group' => 'setVersionGroup',
        'form_names' => 'setFormNames',
        'names' => 'setNames',
        'types' => 'setTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'order' => 'getOrder',
        'form_order' => 'getFormOrder',
        'is_default' => 'getIsDefault',
        'is_battle_only' => 'getIsBattleOnly',
        'is_mega' => 'getIsMega',
        'form_name' => 'getFormName',
        'pokemon' => 'getPokemon',
        'sprites' => 'getSprites',
        'version_group' => 'getVersionGroup',
        'form_names' => 'getFormNames',
        'names' => 'getNames',
        'types' => 'getTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('form_order', $data ?? [], null);
        $this->setIfExists('is_default', $data ?? [], null);
        $this->setIfExists('is_battle_only', $data ?? [], null);
        $this->setIfExists('is_mega', $data ?? [], null);
        $this->setIfExists('form_name', $data ?? [], null);
        $this->setIfExists('pokemon', $data ?? [], null);
        $this->setIfExists('sprites', $data ?? [], null);
        $this->setIfExists('version_group', $data ?? [], null);
        $this->setIfExists('form_names', $data ?? [], null);
        $this->setIfExists('names', $data ?? [], null);
        $this->setIfExists('types', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['form_name'] === null) {
            $invalidProperties[] = "'form_name' can't be null";
        }
        if ((mb_strlen($this->container['form_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'form_name', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['pokemon'] === null) {
            $invalidProperties[] = "'pokemon' can't be null";
        }
        if ($this->container['sprites'] === null) {
            $invalidProperties[] = "'sprites' can't be null";
        }
        if ($this->container['version_group'] === null) {
            $invalidProperties[] = "'version_group' can't be null";
        }
        if ($this->container['form_names'] === null) {
            $invalidProperties[] = "'form_names' can't be null";
        }
        if ($this->container['names'] === null) {
            $invalidProperties[] = "'names' can't be null";
        }
        if ($this->container['types'] === null) {
            $invalidProperties[] = "'types' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId(int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new InvalidArgumentException('invalid length for $name when calling PokemonFormDetail., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder(): ?int
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order order
     *
     * @return $this
     */
    public function setOrder(?int $order): static
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets form_order
     *
     * @return int|null
     */
    public function getFormOrder(): ?int
    {
        return $this->container['form_order'];
    }

    /**
     * Sets form_order
     *
     * @param int|null $form_order form_order
     *
     * @return $this
     */
    public function setFormOrder(?int $form_order): static
    {
        if (is_null($form_order)) {
            array_push($this->openAPINullablesSetToNull, 'form_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_order'] = $form_order;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault(): ?bool
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default is_default
     *
     * @return $this
     */
    public function setIsDefault(?bool $is_default): static
    {
        if (is_null($is_default)) {
            throw new InvalidArgumentException('non-nullable is_default cannot be null');
        }
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets is_battle_only
     *
     * @return bool|null
     */
    public function getIsBattleOnly(): ?bool
    {
        return $this->container['is_battle_only'];
    }

    /**
     * Sets is_battle_only
     *
     * @param bool|null $is_battle_only is_battle_only
     *
     * @return $this
     */
    public function setIsBattleOnly(?bool $is_battle_only): static
    {
        if (is_null($is_battle_only)) {
            throw new InvalidArgumentException('non-nullable is_battle_only cannot be null');
        }
        $this->container['is_battle_only'] = $is_battle_only;

        return $this;
    }

    /**
     * Gets is_mega
     *
     * @return bool|null
     */
    public function getIsMega(): ?bool
    {
        return $this->container['is_mega'];
    }

    /**
     * Sets is_mega
     *
     * @param bool|null $is_mega is_mega
     *
     * @return $this
     */
    public function setIsMega(?bool $is_mega): static
    {
        if (is_null($is_mega)) {
            throw new InvalidArgumentException('non-nullable is_mega cannot be null');
        }
        $this->container['is_mega'] = $is_mega;

        return $this;
    }

    /**
     * Gets form_name
     *
     * @return string
     */
    public function getFormName(): string
    {
        return $this->container['form_name'];
    }

    /**
     * Sets form_name
     *
     * @param string $form_name form_name
     *
     * @return $this
     */
    public function setFormName(string $form_name): static
    {
        if (is_null($form_name)) {
            throw new InvalidArgumentException('non-nullable form_name cannot be null');
        }
        if ((mb_strlen($form_name) > 30)) {
            throw new InvalidArgumentException('invalid length for $form_name when calling PokemonFormDetail., must be smaller than or equal to 30.');
        }

        $this->container['form_name'] = $form_name;

        return $this;
    }

    /**
     * Gets pokemon
     *
     * @return \OpenAPI\Client\Model\PokemonSummary
     */
    public function getPokemon(): \OpenAPI\Client\Model\PokemonSummary
    {
        return $this->container['pokemon'];
    }

    /**
     * Sets pokemon
     *
     * @param \OpenAPI\Client\Model\PokemonSummary $pokemon pokemon
     *
     * @return $this
     */
    public function setPokemon(\OpenAPI\Client\Model\PokemonSummary $pokemon): static
    {
        if (is_null($pokemon)) {
            throw new InvalidArgumentException('non-nullable pokemon cannot be null');
        }
        $this->container['pokemon'] = $pokemon;

        return $this;
    }

    /**
     * Gets sprites
     *
     * @return \OpenAPI\Client\Model\PokemonFormDetailSprites
     */
    public function getSprites(): \OpenAPI\Client\Model\PokemonFormDetailSprites
    {
        return $this->container['sprites'];
    }

    /**
     * Sets sprites
     *
     * @param \OpenAPI\Client\Model\PokemonFormDetailSprites $sprites sprites
     *
     * @return $this
     */
    public function setSprites(\OpenAPI\Client\Model\PokemonFormDetailSprites $sprites): static
    {
        if (is_null($sprites)) {
            throw new InvalidArgumentException('non-nullable sprites cannot be null');
        }
        $this->container['sprites'] = $sprites;

        return $this;
    }

    /**
     * Gets version_group
     *
     * @return \OpenAPI\Client\Model\VersionGroupSummary
     */
    public function getVersionGroup(): \OpenAPI\Client\Model\VersionGroupSummary
    {
        return $this->container['version_group'];
    }

    /**
     * Sets version_group
     *
     * @param \OpenAPI\Client\Model\VersionGroupSummary $version_group version_group
     *
     * @return $this
     */
    public function setVersionGroup(\OpenAPI\Client\Model\VersionGroupSummary $version_group): static
    {
        if (is_null($version_group)) {
            throw new InvalidArgumentException('non-nullable version_group cannot be null');
        }
        $this->container['version_group'] = $version_group;

        return $this;
    }

    /**
     * Gets form_names
     *
     * @return \OpenAPI\Client\Model\PokemonFormDetailFormNamesInner[]
     */
    public function getFormNames(): array
    {
        return $this->container['form_names'];
    }

    /**
     * Sets form_names
     *
     * @param \OpenAPI\Client\Model\PokemonFormDetailFormNamesInner[] $form_names form_names
     *
     * @return $this
     */
    public function setFormNames(array $form_names): static
    {
        if (is_null($form_names)) {
            throw new InvalidArgumentException('non-nullable form_names cannot be null');
        }
        $this->container['form_names'] = $form_names;

        return $this;
    }

    /**
     * Gets names
     *
     * @return \OpenAPI\Client\Model\PokemonFormDetailFormNamesInner[]
     */
    public function getNames(): array
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param \OpenAPI\Client\Model\PokemonFormDetailFormNamesInner[] $names names
     *
     * @return $this
     */
    public function setNames(array $names): static
    {
        if (is_null($names)) {
            throw new InvalidArgumentException('non-nullable names cannot be null');
        }
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets types
     *
     * @return \OpenAPI\Client\Model\PokemonDetailTypesInner[]
     */
    public function getTypes(): array
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param \OpenAPI\Client\Model\PokemonDetailTypesInner[] $types types
     *
     * @return $this
     */
    public function setTypes(array $types): static
    {
        if (is_null($types)) {
            throw new InvalidArgumentException('non-nullable types cannot be null');
        }
        $this->container['types'] = $types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


