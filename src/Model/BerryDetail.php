<?php
/**
 * BerryDetail
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PokéAPI
 *
 * All the Pokémon data you'll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We've covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.
 *
 * The version of the OpenAPI document: 2.7.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * BerryDetail Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class BerryDetail implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'BerryDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'growth_time' => 'int',
        'max_harvest' => 'int',
        'natural_gift_power' => 'int',
        'size' => 'int',
        'smoothness' => 'int',
        'soil_dryness' => 'int',
        'firmness' => '\OpenAPI\Client\Model\BerryFirmnessSummary',
        'flavors' => '\OpenAPI\Client\Model\BerryDetailFlavorsInner[]',
        'item' => '\OpenAPI\Client\Model\ItemSummary',
        'natural_gift_type' => '\OpenAPI\Client\Model\TypeSummary'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'growth_time' => null,
        'max_harvest' => null,
        'natural_gift_power' => null,
        'size' => null,
        'smoothness' => null,
        'soil_dryness' => null,
        'firmness' => null,
        'flavors' => null,
        'item' => null,
        'natural_gift_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'growth_time' => false,
        'max_harvest' => false,
        'natural_gift_power' => false,
        'size' => false,
        'smoothness' => false,
        'soil_dryness' => false,
        'firmness' => false,
        'flavors' => false,
        'item' => false,
        'natural_gift_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'growth_time' => 'growth_time',
        'max_harvest' => 'max_harvest',
        'natural_gift_power' => 'natural_gift_power',
        'size' => 'size',
        'smoothness' => 'smoothness',
        'soil_dryness' => 'soil_dryness',
        'firmness' => 'firmness',
        'flavors' => 'flavors',
        'item' => 'item',
        'natural_gift_type' => 'natural_gift_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'growth_time' => 'setGrowthTime',
        'max_harvest' => 'setMaxHarvest',
        'natural_gift_power' => 'setNaturalGiftPower',
        'size' => 'setSize',
        'smoothness' => 'setSmoothness',
        'soil_dryness' => 'setSoilDryness',
        'firmness' => 'setFirmness',
        'flavors' => 'setFlavors',
        'item' => 'setItem',
        'natural_gift_type' => 'setNaturalGiftType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'growth_time' => 'getGrowthTime',
        'max_harvest' => 'getMaxHarvest',
        'natural_gift_power' => 'getNaturalGiftPower',
        'size' => 'getSize',
        'smoothness' => 'getSmoothness',
        'soil_dryness' => 'getSoilDryness',
        'firmness' => 'getFirmness',
        'flavors' => 'getFlavors',
        'item' => 'getItem',
        'natural_gift_type' => 'getNaturalGiftType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('growth_time', $data ?? [], null);
        $this->setIfExists('max_harvest', $data ?? [], null);
        $this->setIfExists('natural_gift_power', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('smoothness', $data ?? [], null);
        $this->setIfExists('soil_dryness', $data ?? [], null);
        $this->setIfExists('firmness', $data ?? [], null);
        $this->setIfExists('flavors', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('natural_gift_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['growth_time'] === null) {
            $invalidProperties[] = "'growth_time' can't be null";
        }
        if ($this->container['max_harvest'] === null) {
            $invalidProperties[] = "'max_harvest' can't be null";
        }
        if ($this->container['natural_gift_power'] === null) {
            $invalidProperties[] = "'natural_gift_power' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['smoothness'] === null) {
            $invalidProperties[] = "'smoothness' can't be null";
        }
        if ($this->container['soil_dryness'] === null) {
            $invalidProperties[] = "'soil_dryness' can't be null";
        }
        if ($this->container['firmness'] === null) {
            $invalidProperties[] = "'firmness' can't be null";
        }
        if ($this->container['flavors'] === null) {
            $invalidProperties[] = "'flavors' can't be null";
        }
        if ($this->container['item'] === null) {
            $invalidProperties[] = "'item' can't be null";
        }
        if ($this->container['natural_gift_type'] === null) {
            $invalidProperties[] = "'natural_gift_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId(int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new InvalidArgumentException('invalid length for $name when calling BerryDetail., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets growth_time
     *
     * @return int
     */
    public function getGrowthTime(): int
    {
        return $this->container['growth_time'];
    }

    /**
     * Sets growth_time
     *
     * @param int $growth_time growth_time
     *
     * @return $this
     */
    public function setGrowthTime(int $growth_time): static
    {
        if (is_null($growth_time)) {
            throw new InvalidArgumentException('non-nullable growth_time cannot be null');
        }
        $this->container['growth_time'] = $growth_time;

        return $this;
    }

    /**
     * Gets max_harvest
     *
     * @return int
     */
    public function getMaxHarvest(): int
    {
        return $this->container['max_harvest'];
    }

    /**
     * Sets max_harvest
     *
     * @param int $max_harvest max_harvest
     *
     * @return $this
     */
    public function setMaxHarvest(int $max_harvest): static
    {
        if (is_null($max_harvest)) {
            throw new InvalidArgumentException('non-nullable max_harvest cannot be null');
        }
        $this->container['max_harvest'] = $max_harvest;

        return $this;
    }

    /**
     * Gets natural_gift_power
     *
     * @return int
     */
    public function getNaturalGiftPower(): int
    {
        return $this->container['natural_gift_power'];
    }

    /**
     * Sets natural_gift_power
     *
     * @param int $natural_gift_power natural_gift_power
     *
     * @return $this
     */
    public function setNaturalGiftPower(int $natural_gift_power): static
    {
        if (is_null($natural_gift_power)) {
            throw new InvalidArgumentException('non-nullable natural_gift_power cannot be null');
        }
        $this->container['natural_gift_power'] = $natural_gift_power;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize(): int
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size size
     *
     * @return $this
     */
    public function setSize(int $size): static
    {
        if (is_null($size)) {
            throw new InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets smoothness
     *
     * @return int
     */
    public function getSmoothness(): int
    {
        return $this->container['smoothness'];
    }

    /**
     * Sets smoothness
     *
     * @param int $smoothness smoothness
     *
     * @return $this
     */
    public function setSmoothness(int $smoothness): static
    {
        if (is_null($smoothness)) {
            throw new InvalidArgumentException('non-nullable smoothness cannot be null');
        }
        $this->container['smoothness'] = $smoothness;

        return $this;
    }

    /**
     * Gets soil_dryness
     *
     * @return int
     */
    public function getSoilDryness(): int
    {
        return $this->container['soil_dryness'];
    }

    /**
     * Sets soil_dryness
     *
     * @param int $soil_dryness soil_dryness
     *
     * @return $this
     */
    public function setSoilDryness(int $soil_dryness): static
    {
        if (is_null($soil_dryness)) {
            throw new InvalidArgumentException('non-nullable soil_dryness cannot be null');
        }
        $this->container['soil_dryness'] = $soil_dryness;

        return $this;
    }

    /**
     * Gets firmness
     *
     * @return \OpenAPI\Client\Model\BerryFirmnessSummary
     */
    public function getFirmness(): \OpenAPI\Client\Model\BerryFirmnessSummary
    {
        return $this->container['firmness'];
    }

    /**
     * Sets firmness
     *
     * @param \OpenAPI\Client\Model\BerryFirmnessSummary $firmness firmness
     *
     * @return $this
     */
    public function setFirmness(\OpenAPI\Client\Model\BerryFirmnessSummary $firmness): static
    {
        if (is_null($firmness)) {
            throw new InvalidArgumentException('non-nullable firmness cannot be null');
        }
        $this->container['firmness'] = $firmness;

        return $this;
    }

    /**
     * Gets flavors
     *
     * @return \OpenAPI\Client\Model\BerryDetailFlavorsInner[]
     */
    public function getFlavors(): array
    {
        return $this->container['flavors'];
    }

    /**
     * Sets flavors
     *
     * @param \OpenAPI\Client\Model\BerryDetailFlavorsInner[] $flavors flavors
     *
     * @return $this
     */
    public function setFlavors(array $flavors): static
    {
        if (is_null($flavors)) {
            throw new InvalidArgumentException('non-nullable flavors cannot be null');
        }
        $this->container['flavors'] = $flavors;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \OpenAPI\Client\Model\ItemSummary
     */
    public function getItem(): \OpenAPI\Client\Model\ItemSummary
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \OpenAPI\Client\Model\ItemSummary $item item
     *
     * @return $this
     */
    public function setItem(\OpenAPI\Client\Model\ItemSummary $item): static
    {
        if (is_null($item)) {
            throw new InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets natural_gift_type
     *
     * @return \OpenAPI\Client\Model\TypeSummary
     */
    public function getNaturalGiftType(): \OpenAPI\Client\Model\TypeSummary
    {
        return $this->container['natural_gift_type'];
    }

    /**
     * Sets natural_gift_type
     *
     * @param \OpenAPI\Client\Model\TypeSummary $natural_gift_type natural_gift_type
     *
     * @return $this
     */
    public function setNaturalGiftType(\OpenAPI\Client\Model\TypeSummary $natural_gift_type): static
    {
        if (is_null($natural_gift_type)) {
            throw new InvalidArgumentException('non-nullable natural_gift_type cannot be null');
        }
        $this->container['natural_gift_type'] = $natural_gift_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


