<?php
/**
 * EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PokéAPI
 *
 * All the Pokémon data you'll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We've covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.
 *
 * The version of the OpenAPI document: 2.7.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'EvolutionChainDetail_chain_evolves_to_inner_evolution_details_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'gender' => '\OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender',
        'held_item' => '\OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender',
        'item' => '\OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender',
        'known_move' => 'object',
        'known_move_type' => 'object',
        'location' => '\OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender',
        'min_affection' => 'int',
        'min_beauty' => 'int',
        'min_happiness' => 'int',
        'min_level' => 'int',
        'needs_overworld_rain' => 'bool',
        'party_species' => 'string',
        'party_type' => 'string',
        'relative_physical_stats' => 'string',
        'time_of_day' => 'string',
        'trade_species' => 'string',
        'trigger' => '\OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon',
        'turn_upside_down' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'gender' => null,
        'held_item' => null,
        'item' => null,
        'known_move' => null,
        'known_move_type' => null,
        'location' => null,
        'min_affection' => 'int32',
        'min_beauty' => 'int32',
        'min_happiness' => 'int32',
        'min_level' => 'int32',
        'needs_overworld_rain' => null,
        'party_species' => null,
        'party_type' => null,
        'relative_physical_stats' => null,
        'time_of_day' => null,
        'trade_species' => null,
        'trigger' => null,
        'turn_upside_down' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'gender' => false,
        'held_item' => false,
        'item' => false,
        'known_move' => false,
        'known_move_type' => false,
        'location' => false,
        'min_affection' => false,
        'min_beauty' => false,
        'min_happiness' => false,
        'min_level' => false,
        'needs_overworld_rain' => false,
        'party_species' => false,
        'party_type' => false,
        'relative_physical_stats' => false,
        'time_of_day' => false,
        'trade_species' => false,
        'trigger' => false,
        'turn_upside_down' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'gender' => 'gender',
        'held_item' => 'held_item',
        'item' => 'item',
        'known_move' => 'known_move',
        'known_move_type' => 'known_move_type',
        'location' => 'location',
        'min_affection' => 'min_affection',
        'min_beauty' => 'min_beauty',
        'min_happiness' => 'min_happiness',
        'min_level' => 'min_level',
        'needs_overworld_rain' => 'needs_overworld_rain',
        'party_species' => 'party_species',
        'party_type' => 'party_type',
        'relative_physical_stats' => 'relative_physical_stats',
        'time_of_day' => 'time_of_day',
        'trade_species' => 'trade_species',
        'trigger' => 'trigger',
        'turn_upside_down' => 'turn_upside_down'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'gender' => 'setGender',
        'held_item' => 'setHeldItem',
        'item' => 'setItem',
        'known_move' => 'setKnownMove',
        'known_move_type' => 'setKnownMoveType',
        'location' => 'setLocation',
        'min_affection' => 'setMinAffection',
        'min_beauty' => 'setMinBeauty',
        'min_happiness' => 'setMinHappiness',
        'min_level' => 'setMinLevel',
        'needs_overworld_rain' => 'setNeedsOverworldRain',
        'party_species' => 'setPartySpecies',
        'party_type' => 'setPartyType',
        'relative_physical_stats' => 'setRelativePhysicalStats',
        'time_of_day' => 'setTimeOfDay',
        'trade_species' => 'setTradeSpecies',
        'trigger' => 'setTrigger',
        'turn_upside_down' => 'setTurnUpsideDown'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'gender' => 'getGender',
        'held_item' => 'getHeldItem',
        'item' => 'getItem',
        'known_move' => 'getKnownMove',
        'known_move_type' => 'getKnownMoveType',
        'location' => 'getLocation',
        'min_affection' => 'getMinAffection',
        'min_beauty' => 'getMinBeauty',
        'min_happiness' => 'getMinHappiness',
        'min_level' => 'getMinLevel',
        'needs_overworld_rain' => 'getNeedsOverworldRain',
        'party_species' => 'getPartySpecies',
        'party_type' => 'getPartyType',
        'relative_physical_stats' => 'getRelativePhysicalStats',
        'time_of_day' => 'getTimeOfDay',
        'trade_species' => 'getTradeSpecies',
        'trigger' => 'getTrigger',
        'turn_upside_down' => 'getTurnUpsideDown'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('held_item', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('known_move', $data ?? [], null);
        $this->setIfExists('known_move_type', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('min_affection', $data ?? [], null);
        $this->setIfExists('min_beauty', $data ?? [], null);
        $this->setIfExists('min_happiness', $data ?? [], null);
        $this->setIfExists('min_level', $data ?? [], null);
        $this->setIfExists('needs_overworld_rain', $data ?? [], null);
        $this->setIfExists('party_species', $data ?? [], null);
        $this->setIfExists('party_type', $data ?? [], null);
        $this->setIfExists('relative_physical_stats', $data ?? [], null);
        $this->setIfExists('time_of_day', $data ?? [], null);
        $this->setIfExists('trade_species', $data ?? [], null);
        $this->setIfExists('trigger', $data ?? [], null);
        $this->setIfExists('turn_upside_down', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['gender'] === null) {
            $invalidProperties[] = "'gender' can't be null";
        }
        if ($this->container['held_item'] === null) {
            $invalidProperties[] = "'held_item' can't be null";
        }
        if ($this->container['item'] === null) {
            $invalidProperties[] = "'item' can't be null";
        }
        if ($this->container['known_move'] === null) {
            $invalidProperties[] = "'known_move' can't be null";
        }
        if ($this->container['known_move_type'] === null) {
            $invalidProperties[] = "'known_move_type' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['min_affection'] === null) {
            $invalidProperties[] = "'min_affection' can't be null";
        }
        if ($this->container['min_beauty'] === null) {
            $invalidProperties[] = "'min_beauty' can't be null";
        }
        if ($this->container['min_happiness'] === null) {
            $invalidProperties[] = "'min_happiness' can't be null";
        }
        if ($this->container['min_level'] === null) {
            $invalidProperties[] = "'min_level' can't be null";
        }
        if ($this->container['needs_overworld_rain'] === null) {
            $invalidProperties[] = "'needs_overworld_rain' can't be null";
        }
        if ($this->container['party_species'] === null) {
            $invalidProperties[] = "'party_species' can't be null";
        }
        if ($this->container['party_type'] === null) {
            $invalidProperties[] = "'party_type' can't be null";
        }
        if ($this->container['relative_physical_stats'] === null) {
            $invalidProperties[] = "'relative_physical_stats' can't be null";
        }
        if ($this->container['time_of_day'] === null) {
            $invalidProperties[] = "'time_of_day' can't be null";
        }
        if ($this->container['trade_species'] === null) {
            $invalidProperties[] = "'trade_species' can't be null";
        }
        if ($this->container['trigger'] === null) {
            $invalidProperties[] = "'trigger' can't be null";
        }
        if ($this->container['turn_upside_down'] === null) {
            $invalidProperties[] = "'turn_upside_down' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gender
     *
     * @return \OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender
     */
    public function getGender(): \OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender $gender gender
     *
     * @return $this
     */
    public function setGender(\OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender $gender): static
    {
        if (is_null($gender)) {
            throw new InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets held_item
     *
     * @return \OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender
     */
    public function getHeldItem(): \OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender
    {
        return $this->container['held_item'];
    }

    /**
     * Sets held_item
     *
     * @param \OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender $held_item held_item
     *
     * @return $this
     */
    public function setHeldItem(\OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender $held_item): static
    {
        if (is_null($held_item)) {
            throw new InvalidArgumentException('non-nullable held_item cannot be null');
        }
        $this->container['held_item'] = $held_item;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender
     */
    public function getItem(): \OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender $item item
     *
     * @return $this
     */
    public function setItem(\OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender $item): static
    {
        if (is_null($item)) {
            throw new InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets known_move
     *
     * @return object
     */
    public function getKnownMove(): object
    {
        return $this->container['known_move'];
    }

    /**
     * Sets known_move
     *
     * @param object $known_move known_move
     *
     * @return $this
     */
    public function setKnownMove(object $known_move): static
    {
        if (is_null($known_move)) {
            throw new InvalidArgumentException('non-nullable known_move cannot be null');
        }
        $this->container['known_move'] = $known_move;

        return $this;
    }

    /**
     * Gets known_move_type
     *
     * @return object
     */
    public function getKnownMoveType(): object
    {
        return $this->container['known_move_type'];
    }

    /**
     * Sets known_move_type
     *
     * @param object $known_move_type known_move_type
     *
     * @return $this
     */
    public function setKnownMoveType(object $known_move_type): static
    {
        if (is_null($known_move_type)) {
            throw new InvalidArgumentException('non-nullable known_move_type cannot be null');
        }
        $this->container['known_move_type'] = $known_move_type;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender
     */
    public function getLocation(): \OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender $location location
     *
     * @return $this
     */
    public function setLocation(\OpenAPI\Client\Model\EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender $location): static
    {
        if (is_null($location)) {
            throw new InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets min_affection
     *
     * @return int
     */
    public function getMinAffection(): int
    {
        return $this->container['min_affection'];
    }

    /**
     * Sets min_affection
     *
     * @param int $min_affection min_affection
     *
     * @return $this
     */
    public function setMinAffection(int $min_affection): static
    {
        if (is_null($min_affection)) {
            throw new InvalidArgumentException('non-nullable min_affection cannot be null');
        }
        $this->container['min_affection'] = $min_affection;

        return $this;
    }

    /**
     * Gets min_beauty
     *
     * @return int
     */
    public function getMinBeauty(): int
    {
        return $this->container['min_beauty'];
    }

    /**
     * Sets min_beauty
     *
     * @param int $min_beauty min_beauty
     *
     * @return $this
     */
    public function setMinBeauty(int $min_beauty): static
    {
        if (is_null($min_beauty)) {
            throw new InvalidArgumentException('non-nullable min_beauty cannot be null');
        }
        $this->container['min_beauty'] = $min_beauty;

        return $this;
    }

    /**
     * Gets min_happiness
     *
     * @return int
     */
    public function getMinHappiness(): int
    {
        return $this->container['min_happiness'];
    }

    /**
     * Sets min_happiness
     *
     * @param int $min_happiness min_happiness
     *
     * @return $this
     */
    public function setMinHappiness(int $min_happiness): static
    {
        if (is_null($min_happiness)) {
            throw new InvalidArgumentException('non-nullable min_happiness cannot be null');
        }
        $this->container['min_happiness'] = $min_happiness;

        return $this;
    }

    /**
     * Gets min_level
     *
     * @return int
     */
    public function getMinLevel(): int
    {
        return $this->container['min_level'];
    }

    /**
     * Sets min_level
     *
     * @param int $min_level min_level
     *
     * @return $this
     */
    public function setMinLevel(int $min_level): static
    {
        if (is_null($min_level)) {
            throw new InvalidArgumentException('non-nullable min_level cannot be null');
        }
        $this->container['min_level'] = $min_level;

        return $this;
    }

    /**
     * Gets needs_overworld_rain
     *
     * @return bool
     */
    public function getNeedsOverworldRain(): bool
    {
        return $this->container['needs_overworld_rain'];
    }

    /**
     * Sets needs_overworld_rain
     *
     * @param bool $needs_overworld_rain needs_overworld_rain
     *
     * @return $this
     */
    public function setNeedsOverworldRain(bool $needs_overworld_rain): static
    {
        if (is_null($needs_overworld_rain)) {
            throw new InvalidArgumentException('non-nullable needs_overworld_rain cannot be null');
        }
        $this->container['needs_overworld_rain'] = $needs_overworld_rain;

        return $this;
    }

    /**
     * Gets party_species
     *
     * @return string
     */
    public function getPartySpecies(): string
    {
        return $this->container['party_species'];
    }

    /**
     * Sets party_species
     *
     * @param string $party_species party_species
     *
     * @return $this
     */
    public function setPartySpecies(string $party_species): static
    {
        if (is_null($party_species)) {
            throw new InvalidArgumentException('non-nullable party_species cannot be null');
        }
        $this->container['party_species'] = $party_species;

        return $this;
    }

    /**
     * Gets party_type
     *
     * @return string
     */
    public function getPartyType(): string
    {
        return $this->container['party_type'];
    }

    /**
     * Sets party_type
     *
     * @param string $party_type party_type
     *
     * @return $this
     */
    public function setPartyType(string $party_type): static
    {
        if (is_null($party_type)) {
            throw new InvalidArgumentException('non-nullable party_type cannot be null');
        }
        $this->container['party_type'] = $party_type;

        return $this;
    }

    /**
     * Gets relative_physical_stats
     *
     * @return string
     */
    public function getRelativePhysicalStats(): string
    {
        return $this->container['relative_physical_stats'];
    }

    /**
     * Sets relative_physical_stats
     *
     * @param string $relative_physical_stats relative_physical_stats
     *
     * @return $this
     */
    public function setRelativePhysicalStats(string $relative_physical_stats): static
    {
        if (is_null($relative_physical_stats)) {
            throw new InvalidArgumentException('non-nullable relative_physical_stats cannot be null');
        }
        $this->container['relative_physical_stats'] = $relative_physical_stats;

        return $this;
    }

    /**
     * Gets time_of_day
     *
     * @return string
     */
    public function getTimeOfDay(): string
    {
        return $this->container['time_of_day'];
    }

    /**
     * Sets time_of_day
     *
     * @param string $time_of_day time_of_day
     *
     * @return $this
     */
    public function setTimeOfDay(string $time_of_day): static
    {
        if (is_null($time_of_day)) {
            throw new InvalidArgumentException('non-nullable time_of_day cannot be null');
        }
        $this->container['time_of_day'] = $time_of_day;

        return $this;
    }

    /**
     * Gets trade_species
     *
     * @return string
     */
    public function getTradeSpecies(): string
    {
        return $this->container['trade_species'];
    }

    /**
     * Sets trade_species
     *
     * @param string $trade_species trade_species
     *
     * @return $this
     */
    public function setTradeSpecies(string $trade_species): static
    {
        if (is_null($trade_species)) {
            throw new InvalidArgumentException('non-nullable trade_species cannot be null');
        }
        $this->container['trade_species'] = $trade_species;

        return $this;
    }

    /**
     * Gets trigger
     *
     * @return \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon
     */
    public function getTrigger(): \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon
    {
        return $this->container['trigger'];
    }

    /**
     * Sets trigger
     *
     * @param \OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon $trigger trigger
     *
     * @return $this
     */
    public function setTrigger(\OpenAPI\Client\Model\AbilityDetailPokemonInnerPokemon $trigger): static
    {
        if (is_null($trigger)) {
            throw new InvalidArgumentException('non-nullable trigger cannot be null');
        }
        $this->container['trigger'] = $trigger;

        return $this;
    }

    /**
     * Gets turn_upside_down
     *
     * @return bool
     */
    public function getTurnUpsideDown(): bool
    {
        return $this->container['turn_upside_down'];
    }

    /**
     * Sets turn_upside_down
     *
     * @param bool $turn_upside_down turn_upside_down
     *
     * @return $this
     */
    public function setTurnUpsideDown(bool $turn_upside_down): static
    {
        if (is_null($turn_upside_down)) {
            throw new InvalidArgumentException('non-nullable turn_upside_down cannot be null');
        }
        $this->container['turn_upside_down'] = $turn_upside_down;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


