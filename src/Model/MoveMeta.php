<?php
/**
 * MoveMeta
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PokéAPI
 *
 * All the Pokémon data you'll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We've covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.
 *
 * The version of the OpenAPI document: 2.7.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * MoveMeta Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MoveMeta implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'MoveMeta';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'ailment' => '\OpenAPI\Client\Model\MoveMetaAilmentSummary',
        'category' => '\OpenAPI\Client\Model\MoveMetaCategorySummary',
        'min_hits' => 'int',
        'max_hits' => 'int',
        'min_turns' => 'int',
        'max_turns' => 'int',
        'drain' => 'int',
        'healing' => 'int',
        'crit_rate' => 'int',
        'ailment_chance' => 'int',
        'flinch_chance' => 'int',
        'stat_chance' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'ailment' => null,
        'category' => null,
        'min_hits' => null,
        'max_hits' => null,
        'min_turns' => null,
        'max_turns' => null,
        'drain' => null,
        'healing' => null,
        'crit_rate' => null,
        'ailment_chance' => null,
        'flinch_chance' => null,
        'stat_chance' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'ailment' => false,
        'category' => false,
        'min_hits' => true,
        'max_hits' => true,
        'min_turns' => true,
        'max_turns' => true,
        'drain' => true,
        'healing' => true,
        'crit_rate' => true,
        'ailment_chance' => true,
        'flinch_chance' => true,
        'stat_chance' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'ailment' => 'ailment',
        'category' => 'category',
        'min_hits' => 'min_hits',
        'max_hits' => 'max_hits',
        'min_turns' => 'min_turns',
        'max_turns' => 'max_turns',
        'drain' => 'drain',
        'healing' => 'healing',
        'crit_rate' => 'crit_rate',
        'ailment_chance' => 'ailment_chance',
        'flinch_chance' => 'flinch_chance',
        'stat_chance' => 'stat_chance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'ailment' => 'setAilment',
        'category' => 'setCategory',
        'min_hits' => 'setMinHits',
        'max_hits' => 'setMaxHits',
        'min_turns' => 'setMinTurns',
        'max_turns' => 'setMaxTurns',
        'drain' => 'setDrain',
        'healing' => 'setHealing',
        'crit_rate' => 'setCritRate',
        'ailment_chance' => 'setAilmentChance',
        'flinch_chance' => 'setFlinchChance',
        'stat_chance' => 'setStatChance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'ailment' => 'getAilment',
        'category' => 'getCategory',
        'min_hits' => 'getMinHits',
        'max_hits' => 'getMaxHits',
        'min_turns' => 'getMinTurns',
        'max_turns' => 'getMaxTurns',
        'drain' => 'getDrain',
        'healing' => 'getHealing',
        'crit_rate' => 'getCritRate',
        'ailment_chance' => 'getAilmentChance',
        'flinch_chance' => 'getFlinchChance',
        'stat_chance' => 'getStatChance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ailment', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('min_hits', $data ?? [], null);
        $this->setIfExists('max_hits', $data ?? [], null);
        $this->setIfExists('min_turns', $data ?? [], null);
        $this->setIfExists('max_turns', $data ?? [], null);
        $this->setIfExists('drain', $data ?? [], null);
        $this->setIfExists('healing', $data ?? [], null);
        $this->setIfExists('crit_rate', $data ?? [], null);
        $this->setIfExists('ailment_chance', $data ?? [], null);
        $this->setIfExists('flinch_chance', $data ?? [], null);
        $this->setIfExists('stat_chance', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['ailment'] === null) {
            $invalidProperties[] = "'ailment' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ailment
     *
     * @return \OpenAPI\Client\Model\MoveMetaAilmentSummary
     */
    public function getAilment(): \OpenAPI\Client\Model\MoveMetaAilmentSummary
    {
        return $this->container['ailment'];
    }

    /**
     * Sets ailment
     *
     * @param \OpenAPI\Client\Model\MoveMetaAilmentSummary $ailment ailment
     *
     * @return $this
     */
    public function setAilment(\OpenAPI\Client\Model\MoveMetaAilmentSummary $ailment): static
    {
        if (is_null($ailment)) {
            throw new InvalidArgumentException('non-nullable ailment cannot be null');
        }
        $this->container['ailment'] = $ailment;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \OpenAPI\Client\Model\MoveMetaCategorySummary
     */
    public function getCategory(): \OpenAPI\Client\Model\MoveMetaCategorySummary
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \OpenAPI\Client\Model\MoveMetaCategorySummary $category category
     *
     * @return $this
     */
    public function setCategory(\OpenAPI\Client\Model\MoveMetaCategorySummary $category): static
    {
        if (is_null($category)) {
            throw new InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets min_hits
     *
     * @return int|null
     */
    public function getMinHits(): ?int
    {
        return $this->container['min_hits'];
    }

    /**
     * Sets min_hits
     *
     * @param int|null $min_hits min_hits
     *
     * @return $this
     */
    public function setMinHits(?int $min_hits): static
    {
        if (is_null($min_hits)) {
            array_push($this->openAPINullablesSetToNull, 'min_hits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_hits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_hits'] = $min_hits;

        return $this;
    }

    /**
     * Gets max_hits
     *
     * @return int|null
     */
    public function getMaxHits(): ?int
    {
        return $this->container['max_hits'];
    }

    /**
     * Sets max_hits
     *
     * @param int|null $max_hits max_hits
     *
     * @return $this
     */
    public function setMaxHits(?int $max_hits): static
    {
        if (is_null($max_hits)) {
            array_push($this->openAPINullablesSetToNull, 'max_hits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_hits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_hits'] = $max_hits;

        return $this;
    }

    /**
     * Gets min_turns
     *
     * @return int|null
     */
    public function getMinTurns(): ?int
    {
        return $this->container['min_turns'];
    }

    /**
     * Sets min_turns
     *
     * @param int|null $min_turns min_turns
     *
     * @return $this
     */
    public function setMinTurns(?int $min_turns): static
    {
        if (is_null($min_turns)) {
            array_push($this->openAPINullablesSetToNull, 'min_turns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_turns', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_turns'] = $min_turns;

        return $this;
    }

    /**
     * Gets max_turns
     *
     * @return int|null
     */
    public function getMaxTurns(): ?int
    {
        return $this->container['max_turns'];
    }

    /**
     * Sets max_turns
     *
     * @param int|null $max_turns max_turns
     *
     * @return $this
     */
    public function setMaxTurns(?int $max_turns): static
    {
        if (is_null($max_turns)) {
            array_push($this->openAPINullablesSetToNull, 'max_turns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_turns', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_turns'] = $max_turns;

        return $this;
    }

    /**
     * Gets drain
     *
     * @return int|null
     */
    public function getDrain(): ?int
    {
        return $this->container['drain'];
    }

    /**
     * Sets drain
     *
     * @param int|null $drain drain
     *
     * @return $this
     */
    public function setDrain(?int $drain): static
    {
        if (is_null($drain)) {
            array_push($this->openAPINullablesSetToNull, 'drain');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('drain', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['drain'] = $drain;

        return $this;
    }

    /**
     * Gets healing
     *
     * @return int|null
     */
    public function getHealing(): ?int
    {
        return $this->container['healing'];
    }

    /**
     * Sets healing
     *
     * @param int|null $healing healing
     *
     * @return $this
     */
    public function setHealing(?int $healing): static
    {
        if (is_null($healing)) {
            array_push($this->openAPINullablesSetToNull, 'healing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('healing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['healing'] = $healing;

        return $this;
    }

    /**
     * Gets crit_rate
     *
     * @return int|null
     */
    public function getCritRate(): ?int
    {
        return $this->container['crit_rate'];
    }

    /**
     * Sets crit_rate
     *
     * @param int|null $crit_rate crit_rate
     *
     * @return $this
     */
    public function setCritRate(?int $crit_rate): static
    {
        if (is_null($crit_rate)) {
            array_push($this->openAPINullablesSetToNull, 'crit_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('crit_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['crit_rate'] = $crit_rate;

        return $this;
    }

    /**
     * Gets ailment_chance
     *
     * @return int|null
     */
    public function getAilmentChance(): ?int
    {
        return $this->container['ailment_chance'];
    }

    /**
     * Sets ailment_chance
     *
     * @param int|null $ailment_chance ailment_chance
     *
     * @return $this
     */
    public function setAilmentChance(?int $ailment_chance): static
    {
        if (is_null($ailment_chance)) {
            array_push($this->openAPINullablesSetToNull, 'ailment_chance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ailment_chance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ailment_chance'] = $ailment_chance;

        return $this;
    }

    /**
     * Gets flinch_chance
     *
     * @return int|null
     */
    public function getFlinchChance(): ?int
    {
        return $this->container['flinch_chance'];
    }

    /**
     * Sets flinch_chance
     *
     * @param int|null $flinch_chance flinch_chance
     *
     * @return $this
     */
    public function setFlinchChance(?int $flinch_chance): static
    {
        if (is_null($flinch_chance)) {
            array_push($this->openAPINullablesSetToNull, 'flinch_chance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('flinch_chance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['flinch_chance'] = $flinch_chance;

        return $this;
    }

    /**
     * Gets stat_chance
     *
     * @return int|null
     */
    public function getStatChance(): ?int
    {
        return $this->container['stat_chance'];
    }

    /**
     * Sets stat_chance
     *
     * @param int|null $stat_chance stat_chance
     *
     * @return $this
     */
    public function setStatChance(?int $stat_chance): static
    {
        if (is_null($stat_chance)) {
            array_push($this->openAPINullablesSetToNull, 'stat_chance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stat_chance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stat_chance'] = $stat_chance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


